var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.484,1,2.138]],["body/modules/AppModule.html",[0,2.172,1,4.188,2,1.793,3,2.36,4,3.049,5,3.049,6,3.581,7,0.03,8,3.581,9,3.581,10,2.826,11,2.148,12,2.148,13,0.308,14,0.267,15,0.267,16,3.633,17,3.128,18,0.786,19,0.892,20,2.377,21,1.523,22,2.664,23,3.633,24,3.633,25,3.633,26,3.633,27,3.128,28,3.633,29,4.781,30,2.664,31,3.633,32,2.664,33,2.664,34,2.664,35,3.633,36,3.633,37,2.664,38,2.664,39,2.664,40,3.633,41,3.633,42,3.633,43,3.633,44,1.65,45,2.377,46,3.633,47,3.633,48,0.308,49,0.182,50,0.021,51,0.021]],["title/controllers/AuthController.html",[52,1.613,53,2.138]],["body/controllers/AuthController.html",[7,0.03,13,0.184,14,0.16,15,0.16,18,0.679,19,0.533,44,0.986,48,0.184,49,0.109,50,0.015,51,0.015,52,1.071,53,2.167,54,1.822,55,1.592,56,2.17,57,0.184,58,1.022,59,2.413,60,2.946,61,2.78,62,3.312,63,3.371,64,3.371,65,3.371,66,3.371,67,1.592,68,1.045,69,3.6,70,1.507,71,2.225,72,3.312,73,2.17,74,0.712,75,2.17,76,1.638,77,1.638,78,0.576,79,1.638,80,1.557,81,1.638,82,1.784,83,2.17,84,3.312,85,2.17,86,3.773,87,2.17,88,2.17,89,2.17,90,2.17,91,3.312,92,3.312,93,2.17,94,2.122,95,1.822,96,3.312,97,2.78,98,1.743,99,2.17,100,1.822,101,2.748,102,3.312,103,2.17,104,1.822,105,2.318,106,3.312,107,2.17,108,1.592,109,1.42,110,1.592,111,1.592,112,1.592,113,1.592,114,2.167,115,2.164,116,1.822,117,1.42,118,1.283,119,1.822,120,1.592,121,0.986,122,1.822,123,1.958,124,1.592,125,1.822,126,1.822,127,0.779,128,1.592,129,0.91,130,2.17,131,1.42,132,3.297,133,1.978,134,2.17,135,1.638,136,2.199,137,2.17,138,2.17,139,2.657,140,2.946,141,2.17,142,2.17,143,0.67,144,2.17,145,1.635,146,1.958,147,2.17,148,2.17,149,2.17,150,1.592,151,2.17,152,1.169,153,2.17,154,2.429,155,3.312,156,0.986,157,2.628,158,2.17,159,2.17,160,3.312,161,0.986,162,2.429,163,1.592,164,1.283,165,1.283,166,2.17,167,0.91,168,0.621,169,1.592,170,1.071,171,1.592,172,2.17,173,2.17,174,2.17,175,2.17,176,2.17,177,2.17]],["title/modules/AuthModule.html",[0,1.484,6,1.931]],["body/modules/AuthModule.html",[0,2.215,2,1.847,3,2.407,6,3.77,7,0.03,10,2.882,11,2.213,12,2.213,13,0.317,14,0.275,15,0.275,17,2.449,18,0.764,19,0.919,20,2.449,21,1.569,44,2.215,45,3.19,48,0.317,49,0.187,50,0.021,51,0.021,53,3.548,115,3.29,116,3.141,121,1.7,178,3.141,179,3.141,180,3.141,181,3.855,182,3.743,183,4.876,184,3.743,185,1.7,186,3.743,187,3.743,188,2.745,189,3.576,190,3.743,191,3.141,192,2.745,193,2.745,194,2.213,195,3.743,196,4.092,197,3.141,198,3.743,199,3.743,200,3.743]],["title/injectables/AuthService.html",[115,1.76,201,1.087]],["body/injectables/AuthService.html",[7,0.03,13,0.154,14,0.133,15,0.133,18,0.684,19,0.445,21,0.76,37,1.33,38,1.33,48,0.154,49,0.091,50,0.013,51,0.013,57,0.154,58,0.889,59,2.386,60,2.627,61,2.417,63,3.006,64,2.417,65,2.417,66,2.417,67,1.33,68,1.041,69,3.281,70,1.363,74,0.692,76,1.59,77,1.59,78,0.559,79,1.59,80,1.925,81,1.533,82,0.977,86,3.424,94,2.19,95,2.417,97,1.522,98,1.389,100,2.417,101,2.397,104,2.417,105,2.152,114,1.187,115,1.551,117,1.187,118,1.702,119,1.522,122,1.522,125,1.522,126,1.522,127,0.651,128,1.33,129,0.76,133,2.223,135,1.106,143,1.743,145,0.895,146,2.118,156,1.308,157,1.187,161,1.853,167,2.16,168,1.421,170,1.768,185,2.152,188,1.33,201,0.959,202,0.977,203,1.522,204,2.112,205,1.551,206,1.33,207,4.966,208,4.966,209,1.813,210,4.079,211,1.813,212,2.88,213,1.813,214,3.006,215,1.813,216,1.813,217,3.006,218,1.813,219,1.813,220,1.813,221,2.112,222,2.551,223,1.813,224,1.702,225,1.33,226,1.522,227,1.522,228,1.187,229,1.813,230,1.522,231,1.33,232,1.33,233,1.929,234,1.522,235,1.522,236,2.417,237,2.417,238,2.417,239,1.813,240,1.522,241,2.112,242,2.88,243,2.88,244,1.813,245,1.522,246,2.417,247,1.813,248,2.112,249,1.522,250,2.88,251,1.813,252,1.884,253,1.813,254,1.813,255,1.813,256,1.522,257,1.813,258,1.33,259,1.813,260,1.33,261,1.187,262,2.88,263,2.88,264,2.88,265,1.522,266,0.977,267,2.417,268,1.813,269,2.112,270,1.813,271,2.112,272,1.813,273,1.187,274,1.702,275,1.813,276,1.702,277,2.118,278,1.522,279,1.502,280,2.112,281,1.072,282,0.895,283,1.187,284,1.33,285,1.702,286,1.072]],["title/classes/BaseQueryParametersDto.html",[49,0.164,287,2.138]],["body/classes/BaseQueryParametersDto.html",[7,0.028,13,0.379,14,0.328,15,0.328,48,0.379,49,0.224,50,0.024,51,0.024,57,0.379,68,0.966,74,0.79,78,0.638,287,3.567,288,1.185,289,4.493,290,3.3,291,3.749,292,1.815,293,4.938,294,4.938,295,4.938,296,3.3,297,4.467,298,4.467,299,4.467,300,4.467]],["title/classes/ChangePasswordDto.html",[49,0.164,69,1.931]],["body/classes/ChangePasswordDto.html",[7,0.029,13,0.238,14,0.207,15,0.207,18,0.34,48,0.238,49,0.201,50,0.018,51,0.018,57,0.238,68,0.903,69,2.37,71,1.681,74,0.538,78,0.435,136,2.905,145,2.515,152,3.175,157,4.225,161,2.123,271,3.428,288,0.745,292,1.334,301,3.923,302,2.359,303,4.009,304,4.324,305,5.369,306,3.365,307,5.221,308,4.948,309,5.096,310,4.277,311,4.009,312,5.096,313,5.096,314,4.009,315,4.009,316,5.096,317,5.096,318,5.096,319,4.277,320,4.277,321,5.895,322,5.096,323,5.096,324,5.096,325,5.096,326,5.096,327,2.81,328,2.81,329,3.428,330,2.359,331,2.359,332,2.81,333,3.923,334,1.661,335,3.365,336,4.277,337,4.009,338,4.009,339,4.009]],["title/classes/CreateGameDto.html",[49,0.164,340,1.76]],["body/classes/CreateGameDto.html",[7,0.029,13,0.362,14,0.314,15,0.314,48,0.362,49,0.214,50,0.023,51,0.023,57,0.362,68,1.165,74,0.832,78,0.673,288,1.133,292,1.766,340,2.857,341,5.306,342,2.796,343,3.41,344,3.41,345,3.41,346,3.41,347,3.41,348,3.134,349,4.274,350,4.274,351,3.587,352,4.274]],["title/classes/CreateUserDto.html",[49,0.164,105,1.484]],["body/classes/CreateUserDto.html",[7,0.029,13,0.156,14,0.135,15,0.135,18,0.352,48,0.156,49,0.146,50,0.013,51,0.013,57,0.156,68,1.126,71,2.169,74,0.695,78,0.645,98,1.4,105,1.321,117,3.487,136,2.83,145,2.936,146,3.443,152,2.94,156,2.645,157,3.572,161,1.64,245,2.441,271,2.648,279,1.877,282,1.435,288,0.487,292,0.968,296,2.212,304,4.436,305,2.441,306,2.441,307,4.755,308,4.755,310,3.448,319,3.448,320,4.755,329,3.795,330,1.541,331,1.541,333,4.343,334,1.085,335,2.441,336,4.755,353,1.201,354,2.648,355,2.648,356,3.611,357,2.135,358,5.175,359,4.362,360,4.108,361,3.547,362,4.362,363,1.836,364,2.908,365,1.836,366,4.477,367,1.836,368,3.227,369,1.836,370,2.133,371,1.836,372,4.477,373,4.108,374,2.908,375,2.908,376,3.493,377,1.836,378,5.175,379,1.836,380,2.908,381,2.908,382,1.836,383,1.566,384,1.836,385,1.836,386,4.763,387,1.836,388,3.448,389,1.836,390,1.836,391,3.031,392,2.908,393,5.329,394,1.346,395,2.441,396,3.611,397,1.836,398,1.836,399,1.346,400,1.836]],["title/classes/CredentialsDto.html",[49,0.164,101,1.76]],["body/classes/CredentialsDto.html",[7,0.028,13,0.4,14,0.347,15,0.347,48,0.4,49,0.236,50,0.025,51,0.025,57,0.4,68,1.106,74,0.757,78,0.612,98,2.337,101,3.037,161,2.738,288,1.253,292,1.877,401,3.965,402,4.725,403,4.725]],["title/classes/FindUsersQueryDto.html",[49,0.164,404,1.76]],["body/classes/FindUsersQueryDto.html",[7,0.029,13,0.331,14,0.287,15,0.287,18,0.472,48,0.331,49,0.195,50,0.022,51,0.022,57,0.331,68,1.113,74,0.843,78,0.682,98,2.144,279,2.319,287,4.041,288,1.034,289,2.861,290,2.101,292,1.667,293,4.203,294,4.203,295,4.203,296,2.697,404,2.697,405,5.065,406,3.251,407,3.274,408,2.697,409,1.841,410,2.979,411,3.901,412,3.901,413,3.277,414,3.901,415,3.901,416,5.531,417,3.901,418,3.901,419,3.901,420,3.901]],["title/classes/Game.html",[49,0.164,421,1.484]],["body/classes/Game.html",[7,0.03,13,0.232,14,0.201,15,0.201,18,0.476,48,0.232,49,0.137,50,0.017,51,0.017,57,0.232,58,1.213,68,1.096,70,1.463,71,2.498,74,0.812,76,0.843,77,0.843,78,0.704,79,0.843,80,1.784,81,0.843,168,0.782,252,1.788,288,0.724,292,1.308,343,2.72,344,2.72,345,2.72,346,2.72,347,2.72,370,2.882,376,3.69,383,1.472,399,2.882,406,2.478,408,2.116,421,1.785,422,2.293,423,3.861,424,3.861,425,3.861,426,3.929,427,4.222,428,3.861,429,2.732,430,4.473,431,5.077,432,5.077,433,5.077,434,2.732,435,3.298,436,2.732,437,2.732,438,2.732,439,3.929,440,2.732,441,2.732,442,3.861,443,2.732,444,2.293,445,2.293,446,3.929,447,2.732,448,2.732,449,3.929,450,2.732,451,2.004,452,2.293,453,3.298,454,2.293,455,2.293,456,4.658,457,3.298,458,3.298,459,1.615,460,2.732,461,4.473,462,2.732,463,3.929,464,2.293,465,2.732]],["title/classes/GameRepository.html",[49,0.164,466,1.931]],["body/classes/GameRepository.html",[7,0.03,13,0.295,14,0.256,15,0.256,18,0.704,19,0.854,48,0.295,49,0.174,50,0.02,51,0.02,57,0.295,58,1.434,59,2.028,74,0.467,76,1.074,77,1.074,78,0.377,79,1.074,81,1.074,94,1.801,127,2.004,129,1.458,133,1.349,135,1.074,143,1.434,156,1.58,167,1.948,168,1.329,224,2.746,274,2.056,276,2.056,277,2.056,281,2.056,282,1.717,283,2.276,285,2.056,286,2.056,288,0.922,340,3.291,343,2.746,344,2.746,345,2.746,346,2.746,347,2.746,368,2.056,408,2.502,409,1.741,421,2.376,459,2.056,466,2.746,467,2.92,468,3.836,469,3.836,470,2.551,471,3.479,472,2.92,473,2.92,474,2.551,475,1.874,476,2.551,477,2.551,478,3.479,479,2.92,480,2.92,481,2.92,482,2.92,483,2.92,484,2.92,485,2.92,486,2.92,487,2.92,488,3.479,489,2.92,490,2.551,491,2.551]],["title/controllers/GamesController.html",[52,1.613,492,2.138]],["body/controllers/GamesController.html",[7,0.03,13,0.216,14,0.187,15,0.187,18,0.731,19,0.625,44,1.156,48,0.216,49,0.127,50,0.016,51,0.016,52,1.256,55,1.866,57,0.216,58,1.151,59,2.428,68,1.037,70,1.373,71,2.172,74,0.695,76,1.502,77,1.502,78,0.528,79,1.502,80,2.225,81,1.599,82,2.379,94,1.886,108,2.736,109,1.665,110,1.866,111,1.866,112,1.866,113,1.866,120,1.866,121,1.156,123,2.206,124,1.866,127,0.914,129,1.066,131,1.665,132,2.736,133,1.713,135,1.599,136,2.006,139,2.206,140,2.736,143,1.151,154,1.866,162,1.866,163,1.866,164,1.504,165,1.504,167,1.066,168,0.728,169,1.866,170,1.256,171,1.866,266,1.37,340,2.916,357,1.504,409,0.847,421,2.21,452,2.135,469,3.24,470,1.866,475,1.37,476,3.24,477,1.866,490,1.866,491,3.24,492,2.441,493,2.135,494,2.441,495,3.131,496,4.083,497,3.707,498,2.544,499,2.544,500,2.135,501,2.544,502,2.544,503,2.544,504,2.544,505,2.544,506,2.544,507,2.135,508,3.201,509,3.131,510,2.544,511,1.665,512,3.131,513,1.665,514,2.135,515,2.206,516,2.135,517,2.135,518,2.379,519,2.135,520,1.665,521,1.665,522,2.544,523,3.707,524,2.544,525,2.544,526,2.135,527,2.544,528,2.544,529,2.135,530,2.135,531,2.135,532,2.135,533,2.544,534,2.135,535,2.135,536,2.544,537,2.135]],["title/modules/GamesModule.html",[0,1.484,8,1.931]],["body/modules/GamesModule.html",[0,2.371,2,2.056,3,2.577,7,0.03,8,3.713,10,3.086,11,2.462,12,2.462,13,0.353,14,0.306,15,0.306,17,2.725,18,0.761,19,1.022,20,2.725,21,1.746,44,2.371,45,3.416,48,0.353,49,0.208,50,0.023,51,0.023,121,1.892,189,3.055,192,3.055,193,3.055,194,2.462,466,2.462,492,3.731,518,3.383,519,3.496,538,3.496,539,3.496,540,4.165,541,3.496,542,4.165,543,4.165]],["title/injectables/GamesService.html",[201,1.087,518,1.76]],["body/injectables/GamesService.html",[7,0.03,13,0.21,14,0.182,15,0.182,18,0.672,19,0.608,21,1.038,48,0.21,49,0.124,50,0.016,51,0.016,57,0.21,58,1.129,59,2.417,68,1.03,74,0.72,76,1.581,77,1.581,78,0.556,79,1.581,80,2.079,81,1.581,94,2.207,127,0.889,129,1.038,133,1.862,135,1.482,139,1.464,143,1.482,150,1.816,152,1.334,156,1.125,165,1.464,167,1.823,168,1.244,170,1.805,201,1.217,202,1.334,205,1.97,224,2.162,225,2.682,228,1.62,233,1.334,258,1.816,260,1.816,261,1.62,266,1.97,273,1.62,274,1.464,276,1.464,277,1.464,281,1.464,282,1.222,284,1.816,285,2.162,286,1.464,340,2.759,343,2.839,344,2.571,345,2.839,346,2.571,347,2.839,357,1.464,368,1.464,421,2.435,466,3.17,469,2.682,470,2.682,474,1.816,475,1.334,476,2.682,477,1.816,480,3.069,481,3.069,482,3.069,483,3.069,484,3.069,485,2.078,491,1.816,494,2.393,495,3.069,496,4.03,497,3.069,507,3.069,508,3.17,518,1.97,520,1.62,541,2.078,544,2.078,545,2.476,546,2.476,547,2.476,548,3.657,549,2.476,550,4.348,551,3.657,552,2.476,553,2.476,554,2.476,555,2.476,556,2.476,557,2.476,558,2.078,559,2.476,560,2.476,561,2.476,562,2.078,563,2.476,564,2.078]],["title/injectables/JwtStrategy.html",[181,1.931,201,1.087]],["body/injectables/JwtStrategy.html",[7,0.03,13,0.306,14,0.265,15,0.265,18,0.713,19,0.885,21,1.512,48,0.306,49,0.18,50,0.021,51,0.021,57,0.306,58,1.468,59,2.065,70,1.307,74,0.639,76,1.468,77,1.468,78,0.614,79,1.468,80,2.065,81,1.113,82,1.942,98,1.398,114,2.359,121,1.638,133,1.398,135,1.113,143,1.468,167,1.512,168,1.032,170,1.78,181,2.813,185,2.746,194,2.132,196,3.026,197,3.993,201,1.584,202,1.942,205,2.563,206,2.645,227,3.026,228,2.359,232,2.645,233,1.942,266,1.942,273,2.359,278,3.026,279,1.512,296,1.942,408,1.942,409,1.2,410,1.942,565,3.026,566,4.758,567,3.606,568,4.758,569,4.758,570,3.606,571,4.758,572,3.606,573,3.606,574,3.606,575,3.026,576,3.606,577,3.606,578,3.606,579,3.606,580,3.606]],["title/injectables/LoggerInterceptor.html",[27,2.138,201,1.087]],["body/injectables/LoggerInterceptor.html",[7,0.03,13,0.295,14,0.256,15,0.256,18,0.633,19,0.854,27,3.04,33,2.551,48,0.295,49,0.174,50,0.02,51,0.02,57,0.295,58,1.434,70,0.854,74,0.702,76,1.614,77,1.614,78,0.504,79,1.614,81,1.434,109,3.423,135,1.074,143,1.614,168,0.995,201,1.546,202,1.874,205,1.874,233,3.007,248,2.551,290,1.874,451,2.551,511,3.04,581,2.92,582,4.646,583,4.646,584,3.479,585,5.984,586,3.479,587,4.646,588,4.685,589,5.231,590,5.582,591,3.479,592,4.39,593,4.646,594,3.479,595,4.39,596,3.479,597,4.646,598,2.551,599,2.92,600,3.479,601,3.479,602,3.479,603,3.479,604,3.479,605,3.479,606,3.479,607,4.646,608,3.479,609,3.479,610,3.479,611,3.479,612,3.479,613,3.479,614,3.479,615,3.479,616,3.479,617,3.479,618,3.479,619,3.479,620,3.479,621,3.479]],["title/classes/ReturnGameDto.html",[49,0.164,513,2.138]],["body/classes/ReturnGameDto.html",[7,0.029,13,0.39,14,0.339,15,0.339,18,0.558,48,0.39,49,0.231,50,0.024,51,0.024,57,0.39,68,0.984,74,0.745,78,0.603,136,2.708,288,1.222,292,1.849,342,3.014,348,3.379,351,3.866,421,2.923,474,3.379,513,3.634,622,5.004]],["title/classes/ReturnUserDto.html",[49,0.164,623,2.138]],["body/classes/ReturnUserDto.html",[7,0.029,13,0.39,14,0.339,15,0.339,18,0.558,48,0.39,49,0.231,50,0.024,51,0.024,57,0.39,68,0.984,70,1.58,74,0.745,78,0.603,136,2.708,288,1.222,292,1.849,353,3.014,623,3.634,624,5.004,625,4.607,626,4.607,627,3.014]],["title/guards/RolesGuard.html",[515,1.931,628,2.396]],["body/guards/RolesGuard.html",[7,0.03,13,0.325,14,0.282,15,0.282,18,0.665,19,0.943,30,2.816,48,0.325,49,0.192,50,0.022,51,0.022,57,0.325,58,1.53,74,0.665,76,1.53,77,1.53,78,0.538,79,1.53,81,1.185,94,1.922,127,1.78,131,2.513,135,1.53,143,1.694,201,1.65,205,2.068,248,3.636,383,2.068,409,1.278,413,3.244,515,2.931,588,4.869,592,4.608,598,2.816,599,3.223,629,3.84,630,3.223,631,6.006,632,3.84,633,6.151,634,3.84,635,3.84,636,3.84,637,3.84,638,3.84,639,3.84,640,3.84,641,5.49,642,3.84,643,3.84]],["title/classes/UpdateGameDto.html",[49,0.164,508,1.931]],["body/classes/UpdateGameDto.html",[7,0.029,13,0.337,14,0.292,15,0.292,18,0.481,48,0.337,49,0.254,50,0.022,51,0.022,57,0.337,68,1.151,71,2.545,74,0.815,78,0.659,288,1.054,292,1.687,334,2.35,342,2.601,343,3.299,344,3.299,345,3.299,346,3.299,347,3.299,348,2.915,508,2.996,644,5.209,645,5.489,646,3.975,647,3.975,648,3.975,649,3.975]],["title/classes/UpdateUserDto.html",[49,0.164,222,1.76]],["body/classes/UpdateUserDto.html",[7,0.029,13,0.316,14,0.274,15,0.274,18,0.589,48,0.316,49,0.244,50,0.021,51,0.021,57,0.316,68,1.017,70,0.917,71,2.406,74,0.77,78,0.623,98,2.1,127,1.945,129,1.565,136,2.46,145,2.403,146,2.878,152,3.091,156,2.211,222,2.622,231,4.366,279,2.27,288,0.99,292,1.62,304,4.209,329,3.57,334,2.207,353,2.443,361,2.878,388,4.085,391,4.085,395,4.817,409,1.803,410,2.917,413,3.185,645,5.217,650,3.734,651,3.734,652,3.734,653,3.734,654,3.734,655,3.734]],["title/classes/User.html",[49,0.164,70,0.802]],["body/classes/User.html",[7,0.03,13,0.185,14,0.16,15,0.16,18,0.488,48,0.185,49,0.109,50,0.015,51,0.015,57,0.185,58,1.026,59,1.562,68,1.121,70,0.816,71,2.532,74,0.825,76,1.026,77,1.243,78,0.707,79,1.026,80,1.562,81,1.026,94,1.289,98,1.562,133,0.845,135,0.673,143,0.673,161,2.046,168,0.624,214,3.381,217,3.381,252,1.426,279,1.689,288,0.578,292,1.106,296,1.79,354,2.954,355,2.954,357,2.381,362,2.438,370,2.438,376,3.304,383,2.753,399,2.438,408,1.79,409,1.341,410,2.17,413,2.175,421,2.55,423,3.381,424,3.381,425,3.381,427,3.781,428,3.381,430,4.807,431,5.157,432,4.956,433,4.956,435,2.789,442,3.381,444,1.83,451,1.599,453,2.789,454,1.83,455,1.83,456,4.887,457,2.789,458,2.789,459,1.289,461,4.807,464,1.83,656,1.83,657,3.381,658,3.324,659,3.324,660,3.324,661,2.18,662,4.506,663,2.18,664,2.18,665,2.18,666,2.18,667,2.18,668,3.324,669,2.18,670,2.18,671,2.18,672,2.18,673,2.18,674,2.18,675,2.18,676,2.18,677,2.18,678,3.324,679,2.18,680,3.324,681,2.18,682,2.18,683,2.438,684,2.18,685,2.18,686,3.324,687,2.18,688,3.324,689,1.83,690,2.18,691,2.18]],["title/classes/UserRepository.html",[49,0.164,185,1.484]],["body/classes/UserRepository.html",[7,0.03,13,0.167,14,0.145,15,0.145,18,0.66,19,0.485,48,0.167,49,0.099,50,0.014,51,0.014,57,0.167,58,0.951,59,2.376,60,2.26,67,2.26,68,1.023,70,1.303,74,0.659,76,1.516,77,1.516,78,0.533,79,1.516,80,0.766,81,1.516,94,2.162,98,2.114,101,2.646,105,2.33,114,1.293,118,1.168,127,1.536,129,0.828,133,2.202,135,1.431,143,1.638,145,0.975,146,1.168,156,1.399,161,2.231,164,1.821,167,1.292,168,0.882,185,1.399,224,1.821,230,2.586,233,2.646,241,2.26,249,1.658,252,2.016,267,1.658,269,2.26,274,1.168,276,1.168,277,1.168,279,2.151,280,1.449,281,1.168,282,0.975,283,1.293,285,1.168,286,1.168,288,0.524,290,1.064,296,2.04,354,2.777,355,2.26,361,1.168,368,1.168,383,2.04,404,2.304,406,2.04,408,1.659,409,1.767,410,2.304,445,2.586,459,1.168,468,2.777,472,1.658,473,1.658,475,1.064,479,1.658,486,1.658,487,1.658,489,1.658,511,2.016,627,1.293,657,3.59,683,2.26,689,1.658,692,1.658,693,3.081,694,3.081,695,2.777,696,2.777,697,3.081,698,1.976,699,3.081,700,1.976,701,3.081,702,1.976,703,1.449,704,1.976,705,1.658,706,1.976,707,3.178,708,3.081,709,1.976,710,1.976,711,1.449,712,1.449,713,1.976,714,1.976,715,1.976,716,1.976,717,2.586,718,1.976,719,4.637,720,3.081,721,3.787,722,3.081,723,1.976,724,1.976,725,1.976,726,1.976,727,3.081,728,3.081,729,3.081,730,3.787,731,1.976,732,1.976,733,1.976,734,3.787,735,1.976,736,1.976,737,1.976,738,1.658,739,1.976,740,1.976,741,1.976,742,1.976,743,3.081,744,1.976,745,1.976,746,1.976,747,1.976]],["title/controllers/UsersController.html",[52,1.613,748,2.138]],["body/controllers/UsersController.html",[7,0.03,13,0.157,14,0.136,15,0.136,18,0.698,19,0.455,44,0.842,48,0.157,49,0.093,50,0.013,51,0.013,52,0.915,55,1.36,57,0.157,58,0.905,59,2.349,68,0.947,70,1.433,71,2.1,74,0.672,76,1.476,77,1.476,78,0.519,79,1.476,80,2.073,81,1.546,82,1.958,94,1.854,105,2.537,108,2.15,109,1.213,110,1.36,111,1.36,112,1.36,113,1.36,118,2.149,120,1.36,121,0.842,123,1.733,124,1.36,127,0.666,129,0.777,131,1.213,132,2.666,133,1.744,135,1.546,136,2.043,139,2.149,140,4.409,143,1.275,154,1.36,162,1.36,163,1.36,164,1.096,165,1.096,167,0.777,168,0.531,169,1.36,170,2.913,171,1.36,204,2.666,221,1.36,222,2.576,256,1.556,266,0.999,282,2.881,290,1.958,359,4.281,361,2.149,394,1.36,404,2.225,406,1.579,409,0.617,475,0.999,490,2.15,494,1.918,500,1.556,509,1.556,511,1.213,512,2.46,514,1.556,515,1.733,516,1.556,517,1.556,520,1.213,521,1.213,523,3.467,526,1.556,529,1.556,530,1.556,531,1.556,532,1.556,534,1.556,535,1.556,537,1.556,562,1.556,623,1.213,627,1.213,695,2.666,696,2.15,703,1.36,711,1.36,712,1.36,748,1.918,749,1.556,750,3.051,751,3.467,752,2.46,753,1.556,754,1.854,755,2.931,756,4.131,757,1.854,758,1.854,759,5.475,760,1.854,761,1.854,762,1.854,763,1.854,764,1.854,765,3.635,766,1.854,767,1.854,768,1.854,769,1.854,770,1.854,771,1.854,772,1.854,773,1.854,774,1.854,775,1.854,776,1.958,777,1.556,778,1.854,779,3.635,780,4.783,781,5.193,782,1.854,783,1.854,784,2.931,785,1.854,786,1.854,787,1.854,788,1.854,789,1.854,790,3.635,791,1.854,792,1.854,793,2.931,794,1.854,795,1.854,796,1.854,797,1.854,798,1.854,799,1.854,800,1.854,801,1.854]],["title/modules/UsersModule.html",[0,1.484,9,1.931]],["body/modules/UsersModule.html",[0,2.371,2,2.056,3,2.577,7,0.03,9,3.713,10,3.086,11,2.462,12,2.462,13,0.353,14,0.306,15,0.306,17,2.725,18,0.761,19,1.022,20,2.725,21,1.746,44,2.371,45,3.416,48,0.353,49,0.208,50,0.023,51,0.023,121,1.892,185,1.892,189,3.055,191,3.496,192,3.055,193,3.055,194,2.462,748,3.731,776,3.383,777,3.496,802,3.496,803,3.496,804,4.165,805,3.496,806,4.165]],["title/injectables/UsersService.html",[201,1.087,776,1.76]],["body/injectables/UsersService.html",[7,0.03,13,0.18,14,0.157,15,0.157,18,0.659,19,0.523,21,0.893,48,0.18,49,0.107,50,0.014,51,0.014,57,0.18,58,1.008,59,2.445,68,0.988,70,1.294,74,0.73,76,1.627,77,1.627,78,0.572,79,1.627,80,1.964,81,1.627,82,1.147,94,2.207,98,1.726,105,2.533,118,1.93,127,0.765,129,0.893,133,1.861,135,1.563,139,1.259,143,1.481,145,1.051,150,1.562,152,1.147,156,0.967,164,1.93,165,1.259,167,2.123,168,1.449,170,2.369,185,2.3,201,1.087,202,1.147,204,2.394,205,1.758,206,1.562,221,2.394,222,2.728,224,1.93,225,2.394,226,1.787,228,1.393,232,1.562,233,1.147,234,2.74,235,2.74,236,2.74,237,2.74,238,3.332,240,1.787,241,2.394,258,1.562,260,1.562,261,1.393,265,1.787,266,1.758,269,1.562,273,1.393,274,1.259,276,1.259,277,1.259,279,1.866,280,2.394,281,1.259,282,1.051,283,1.393,284,1.562,285,1.93,286,1.259,357,1.259,361,1.259,368,1.259,404,2.397,406,2.138,409,1.482,410,2.138,475,1.147,494,2.136,520,1.393,558,1.787,564,1.787,627,1.393,695,2.394,696,2.912,703,2.394,705,1.787,707,2.74,711,1.562,712,1.562,717,2.74,750,2.74,751,3.736,752,2.74,753,2.74,776,1.758,805,1.787,807,1.787,808,2.13,809,2.13,810,2.13,811,3.265,812,2.13,813,3.97,814,2.13,815,3.265,816,2.13,817,2.13,818,2.13,819,2.13,820,2.13,821,2.13,822,2.13,823,3.265,824,2.13,825,2.13,826,2.13,827,2.13,828,2.13]],["title/coverage.html",[829,3.266]],["body/coverage.html",[7,0.03,15,0.228,22,2.278,27,2.032,34,2.278,39,2.278,49,0.321,50,0.019,51,0.019,52,2.435,53,2.032,54,2.607,69,1.836,70,0.762,78,0.337,101,1.673,105,1.411,115,1.673,117,2.032,123,1.836,168,0.889,181,1.836,185,1.411,201,1.861,203,2.607,222,1.673,231,2.278,261,4.386,287,2.032,289,2.278,290,1.673,291,2.607,301,2.607,302,2.607,340,1.673,341,2.607,342,3.228,353,3.228,401,2.607,404,1.673,405,2.607,406,1.673,407,2.607,409,1.034,421,1.411,422,2.607,466,1.836,467,2.607,492,2.032,493,2.607,508,1.836,513,2.032,515,1.836,518,1.673,521,2.032,544,2.607,565,2.607,581,2.607,622,2.607,623,2.032,624,2.607,628,2.278,630,2.607,644,2.607,656,2.607,692,2.607,748,2.032,749,2.607,776,1.673,807,2.607,829,2.278,830,3.106,831,3.106,832,3.106,833,4.934,834,4.934,835,5.785,836,2.607,837,5.592,838,5.785,839,2.607,840,2.607,841,2.607,842,2.607,843,4.934,844,3.106,845,3.106,846,4.301,847,4.301,848,2.607,849,3.106,850,2.607,851,3.106,852,3.106,853,3.106,854,3.106]],["title/dependencies.html",[3,1.939,855,2.731]],["body/dependencies.html",[3,1.978,7,0.03,19,0.984,21,1.68,30,2.939,32,2.939,33,3.736,37,2.939,38,2.939,49,0.255,50,0.022,51,0.022,121,1.82,188,2.939,194,2.369,334,2.369,394,2.939,459,2.369,575,4.276,598,2.939,683,2.939,856,4.007,857,5.601,858,4.007,859,4.007,860,4.007,861,4.007,862,5.094,863,4.007,864,4.007,865,4.007,866,4.007,867,4.007,868,4.007,869,4.007,870,4.007,871,4.007,872,4.007,873,4.007,874,4.007,875,4.007,876,4.007,877,4.007,878,4.007,879,4.007,880,4.007,881,4.007,882,4.007,883,4.007,884,4.007,885,4.007,886,4.007,887,4.007,888,4.007,889,4.007,890,4.007,891,4.007,892,4.007,893,4.007]],["title/miscellaneous/enumerations.html",[894,1.471,895,3.297]],["body/miscellaneous/enumerations.html",[7,0.028,50,0.026,51,0.026,57,0.421,70,1.425,127,2.084,128,3.64,894,2.673,895,4.165,896,4.963,897,5.805,898,5.805,899,4.872]],["title/miscellaneous/functions.html",[894,1.471,900,3.297]],["body/miscellaneous/functions.html",[7,0.026,50,0.026,51,0.026,57,0.434,848,4.295,850,5.229,894,2.756,900,4.295,901,5.117]],["title/index.html",[57,0.231,902,2.731,903,2.731]],["body/index.html",[7,0.029,14,0.291,32,4.087,50,0.022,51,0.022,359,2.907,468,2.907,829,2.907,904,3.964,905,3.964,906,5.06,907,3.964,908,3.964,909,3.964,910,3.964,911,3.964,912,3.964,913,3.964,914,3.964,915,3.964,916,6.304,917,3.964,918,3.964,919,3.964,920,6.202,921,3.964,922,3.964,923,5.06,924,3.964,925,3.964,926,3.964,927,3.964,928,5.06,929,5.06,930,3.964,931,3.964,932,3.964,933,5.06,934,5.06,935,3.964,936,3.964,937,3.964,938,3.964,939,3.964,940,3.327,941,3.964,942,3.964,943,3.964,944,3.964,945,3.964,946,3.964,947,3.964,948,3.964,949,3.964,950,3.964,951,3.964,952,3.964,953,3.964,954,3.964,955,3.964,956,3.964,957,3.964,958,3.964]],["title/modules.html",[2,2.198]],["body/modules.html",[1,3.204,2,2.417,6,2.895,7,0.025,8,2.895,9,2.895,50,0.025,51,0.025,940,5.301,959,6.316,960,6.316,961,6.316]],["title/overview.html",[962,3.738]],["body/overview.html",[1,4.212,2,2.044,3,2.568,4,3.476,5,3.476,6,3.806,7,0.029,8,3.633,9,3.633,10,3.075,11,2.449,12,2.449,44,1.881,50,0.023,51,0.023,115,3.063,178,3.476,179,3.476,180,3.476,181,3.763,202,2.231,288,1.098,518,3.063,538,3.476,539,3.476,628,3.038,738,3.476,776,3.063,802,3.476,803,3.476,962,3.476,963,4.142,964,4.142,965,4.142,966,4.142]],["title/miscellaneous/variables.html",[894,1.471,967,3.297]],["body/miscellaneous/variables.html",[7,0.03,22,3.445,34,3.445,39,3.445,50,0.021,51,0.021,57,0.3,68,0.627,70,1.295,78,0.61,123,2.777,135,1.092,143,1.092,161,1.606,168,1.509,246,2.968,279,1.483,362,4.29,383,1.905,409,1.87,521,2.314,595,2.968,836,3.942,839,2.968,840,2.968,841,2.968,842,2.968,894,1.905,899,4.909,967,2.968,968,3.537,969,3.537,970,3.537,971,3.537,972,3.537,973,3.537,974,3.537,975,3.537,976,3.537,977,4.698,978,4.698,979,3.537,980,3.537,981,3.537,982,3.537,983,3.537,984,3.537,985,3.537,986,3.537,987,3.537,988,3.537,989,3.537,990,3.537,991,3.537,992,3.537,993,3.537,994,4.698,995,3.537,996,3.537,997,3.537,998,3.537,999,3.537,1000,3.537,1001,3.537,1002,3.537,1003,3.537,1004,4.698,1005,4.698,1006,3.537,1007,3.537,1008,3.537,1009,3.537,1010,3.537,1011,3.537,1012,3.537,1013,3.537,1014,3.537,1015,3.537,1016,3.537]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseQueryParametersDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateGameDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"classes/ReturnGameDto.html":{},"classes/ReturnUserDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GamesService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["0.2.38",{"_index":892,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":838,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":844,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":852,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":845,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":835,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":847,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":851,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":843,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":846,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":834,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":738,"title":{},"body":{"classes/UserRepository.html":{},"overview.html":{}}}],["1.0.2",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["1.6.0",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["1.6.1",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["10.0.0",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":728,"title":{},"body":{"classes/UserRepository.html":{}}}],["14",{"_index":966,"title":{},"body":{"overview.html":{}}}],["18000",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{}}}],["20",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Game.html":{},"classes/User.html":{}}}],["200",{"_index":376,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Game.html":{},"classes/User.html":{}}}],["20})@isnumber()@isnotempty({message",{"_index":363,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["23505",{"_index":487,"title":{},"body":{"classes/GameRepository.html":{},"classes/UserRepository.html":{}}}],["3",{"_index":964,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":887,"title":{},"body":{"dependencies.html":{}}}],["3.3.3",{"_index":893,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":313,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["4",{"_index":963,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":891,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":965,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["5.1.3",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["5432",{"_index":993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.7.0",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":370,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Game.html":{},"classes/User.html":{}}}],["600",{"_index":439,"title":{},"body":{"classes/Game.html":{}}}],["64",{"_index":662,"title":{},"body":{"classes/User.html":{}}}],["7.2.0",{"_index":888,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":310,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["8.0.0",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["8.1.1",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["8.7.1",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abstract",{"_index":300,"title":{},"body":{"classes/BaseQueryParametersDto.html":{}}}],["acessar",{"_index":530,"title":{},"body":{"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["adapter",{"_index":979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addgames",{"_index":658,"title":{},"body":{"classes/User.html":{}}}],["addgames(game",{"_index":678,"title":{},"body":{"classes/User.html":{}}}],["addusers",{"_index":426,"title":{},"body":{"classes/Game.html":{}}}],["addusers(user",{"_index":449,"title":{},"body":{"classes/Game.html":{}}}],["admin",{"_index":898,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["administrador",{"_index":788,"title":{},"body":{"controllers/UsersController.html":{}}}],["age",{"_index":354,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["alterada",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["alteração",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["amazing",{"_index":941,"title":{},"body":{"index.html":{}}}],["any).email",{"_index":608,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["any).user",{"_index":606,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["ao",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GameRepository.html":{},"injectables/GamesService.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["apicreatedresponse",{"_index":779,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiforbiddenresponse",{"_index":781,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":780,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty({type",{"_index":358,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apitags",{"_index":778,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags('users",{"_index":782,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":918,"title":{},"body":{"index.html":{}}}],["app_interceptor",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["application.log",{"_index":1014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applications",{"_index":912,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":464,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["associados",{"_index":381,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["async",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["atualizar",{"_index":562,"title":{},"body":{"injectables/GamesService.html":{},"controllers/UsersController.html":{}}}],["atualizar'})@apiforbiddenresponse({description",{"_index":774,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/credentials.dto",{"_index":710,"title":{},"body":{"classes/UserRepository.html":{}}}],["auth/role.decorator",{"_index":517,"title":{},"body":{"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":53,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":951,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":115,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autorização",{"_index":529,"title":{},"body":{"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["await",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":942,"title":{},"body":{"index.html":{}}}],["banco",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"classes/GameRepository.html":{},"injectables/GamesService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["baseentity",{"_index":423,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["basequeryparametersdto",{"_index":287,"title":{"classes/BaseQueryParametersDto.html":{}},"body":{"classes/BaseQueryParametersDto.html":{},"classes/FindUsersQueryDto.html":{},"coverage.html":{}}}],["basequeryparametersdto:2",{"_index":419,"title":{},"body":{"classes/FindUsersQueryDto.html":{}}}],["basequeryparametersdto:3",{"_index":418,"title":{},"body":{"classes/FindUsersQueryDto.html":{}}}],["basequeryparametersdto:4",{"_index":417,"title":{},"body":{"classes/FindUsersQueryDto.html":{}}}],["bcrypt",{"_index":683,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["bcrypt.gensalt",{"_index":720,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcrypt.hash(password",{"_index":689,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["body",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"injectables/LoggerInterceptor.html":{},"controllers/UsersController.html":{}}}],["body('email",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["body(validationpipe",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["body.password",{"_index":604,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["body.passwordconfirmation",{"_index":605,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["boolean",{"_index":413,"title":{},"body":{"classes/FindUsersQueryDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":850,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["brasil",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["brasil'})@isstring()@isnotempty({message",{"_index":367,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["browse",{"_index":961,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":959,"title":{},"body":{"modules.html":{}}}],["building",{"_index":907,"title":{},"body":{"index.html":{}}}],["cadastrado",{"_index":490,"title":{},"body":{"classes/GameRepository.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["cadastro",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["callhandler",{"_index":590,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["canactivate",{"_index":631,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":635,"title":{},"body":{"guards/RolesGuard.html":{}}}],["caractere",{"_index":325,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["caracteres",{"_index":336,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["caracteres'})@isstring({message",{"_index":314,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["caracteres'})@maxlength(32",{"_index":311,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["cascade",{"_index":446,"title":{},"body":{"classes/Game.html":{}}}],["catch",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"classes/GameRepository.html":{},"injectables/GamesService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["change",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["changepassword",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["changepassword(id",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["changepassworddto",{"_index":69,"title":{"classes/ChangePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["changepasswordto",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkage",{"_index":693,"title":{},"body":{"classes/UserRepository.html":{}}}],["checkage(age",{"_index":699,"title":{},"body":{"classes/UserRepository.html":{}}}],["checkcredentials",{"_index":694,"title":{},"body":{"classes/UserRepository.html":{}}}],["checkcredentials(credentialsdto",{"_index":701,"title":{},"body":{"classes/UserRepository.html":{}}}],["checkpassword",{"_index":659,"title":{},"body":{"classes/User.html":{}}}],["checkpassword(password",{"_index":680,"title":{},"body":{"classes/User.html":{}}}],["class",{"_index":49,"title":{"classes/BaseQueryParametersDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateGameDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"classes/ReturnGameDto.html":{},"classes/ReturnUserDto.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseQueryParametersDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateGameDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"classes/ReturnGameDto.html":{},"classes/ReturnUserDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":288,"title":{},"body":{"classes/BaseQueryParametersDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateGameDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"classes/ReturnGameDto.html":{},"classes/ReturnUserDto.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_gamesmodule",{"_index":538,"title":{},"body":{"modules/GamesModule.html":{},"overview.html":{}}}],["cluster_gamesmodule_providers",{"_index":539,"title":{},"body":{"modules/GamesModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":802,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":803,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":456,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["column({nullable",{"_index":430,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["com",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["conferem",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["configs/mailer.config",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["configs/typeorm.config",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["configs/winston.config",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmado",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmation",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmationtoken",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{}}}],["confirmação",{"_index":378,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["confirme",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmemail",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["confirmemail(@param('token",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmemail(confirmationtoken",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmemail(token",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["conflictexception",{"_index":472,"title":{},"body":{"classes/GameRepository.html":{},"classes/UserRepository.html":{}}}],["conflictexception('endereço",{"_index":723,"title":{},"body":{"classes/UserRepository.html":{}}}],["conflictexception('jogo",{"_index":488,"title":{},"body":{"classes/GameRepository.html":{}}}],["const",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject('winston",{"_index":600,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["constructor(gamerepository",{"_index":545,"title":{},"body":{"injectables/GamesService.html":{}}}],["constructor(logger",{"_index":584,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["constructor(private",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":632,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(userrepository",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["conter",{"_index":318,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["context",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoggerInterceptor.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":643,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":639,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":52,"title":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('games",{"_index":522,"title":{},"body":{"controllers/GamesController.html":{}}}],["controller('users",{"_index":783,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GamesController.html":{},"modules/GamesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["country",{"_index":355,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["coverage",{"_index":829,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createadminuser",{"_index":750,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createadminuser(createuserdto",{"_index":753,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createdat",{"_index":424,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["createdatecolumn",{"_index":428,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["creategame",{"_index":469,"title":{},"body":{"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{}}}],["creategame(creategamedto",{"_index":470,"title":{},"body":{"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{}}}],["creategamedto",{"_index":340,"title":{"classes/CreateGameDto.html":{}},"body":{"classes/CreateGameDto.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"coverage.html":{}}}],["createparamdecorator((data",{"_index":973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":695,"title":{},"body":{"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":703,"title":{},"body":{"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":105,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":819,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.emailconfirmation",{"_index":820,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.password",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["createuserdto.passwordconfirmation",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["credentials.dto",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["credentialsdto",{"_index":101,"title":{"classes/CredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CredentialsDto.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["criar",{"_index":784,"title":{},"body":{"controllers/UsersController.html":{}}}],["criar'})@apiforbiddenresponse({description",{"_index":755,"title":{},"body":{"controllers/UsersController.html":{}}}],["crypto",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["crypto.randombytes(32).tostring('hex",{"_index":718,"title":{},"body":{"classes/UserRepository.html":{}}}],["da",{"_index":386,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["dados",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"classes/GameRepository.html":{},"injectables/GamesService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["data",{"_index":616,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["database",{"_index":996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":427,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["date().toisostring",{"_index":611,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["de",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GameRepository.html":{},"injectables/GamesService.html":{},"classes/UpdateUserDto.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["decorators",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/Game.html":{},"controllers/GamesController.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":362,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{},"modules/GamesModule.html":{},"modules/UsersModule.html":{}}}],["defined",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseQueryParametersDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateGameDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"classes/ReturnGameDto.html":{},"classes/ReturnUserDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deletar",{"_index":800,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletar'})@apiforbiddenresponse({description",{"_index":762,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete",{"_index":511,"title":{},"body":{"controllers/GamesController.html":{},"injectables/LoggerInterceptor.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{}}}],["delete('/:id",{"_index":534,"title":{},"body":{"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["delete('/:id')@apiokresponse({description",{"_index":761,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('/:id')@role(userrole.admin",{"_index":501,"title":{},"body":{"controllers/GamesController.html":{}}}],["deleteuser",{"_index":494,"title":{},"body":{"controllers/GamesController.html":{},"injectables/GamesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(@param('id",{"_index":535,"title":{},"body":{"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["deleteuser(gameid",{"_index":548,"title":{},"body":{"injectables/GamesService.html":{}}}],["deleteuser(id",{"_index":500,"title":{},"body":{"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["deleteuser(userid",{"_index":811,"title":{},"body":{"injectables/UsersService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GamesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":359,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["deve",{"_index":307,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["development",{"_index":919,"title":{},"body":{"index.html":{}}}],["dir",{"_index":976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dirname",{"_index":1015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["dtos/create",{"_index":475,"title":{},"body":{"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/find",{"_index":711,"title":{},"body":{"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/return",{"_index":514,"title":{},"body":{"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["dtos/update",{"_index":520,"title":{},"body":{"controllers/GamesController.html":{},"injectables/GamesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":930,"title":{},"body":{"index.html":{}}}],["each",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["efficient",{"_index":908,"title":{},"body":{"index.html":{}}}],["em",{"_index":725,"title":{},"body":{"classes/UserRepository.html":{}}}],["email",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/FindUsersQueryDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["emailconfirmation",{"_index":356,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["encontrado",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["encontrados",{"_index":796,"title":{},"body":{"controllers/UsersController.html":{}}}],["endereço",{"_index":373,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["entities",{"_index":997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity",{"_index":453,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["entity.{js,ts",{"_index":999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entityrepository",{"_index":473,"title":{},"body":{"classes/GameRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(game",{"_index":478,"title":{},"body":{"classes/GameRepository.html":{}}}],["entityrepository(user",{"_index":713,"title":{},"body":{"classes/UserRepository.html":{}}}],["enumerations",{"_index":895,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enviado",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["erro",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"classes/GameRepository.html":{},"injectables/GamesService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["error",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"classes/GameRepository.html":{},"injectables/GamesService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["error.code.tostring",{"_index":486,"title":{},"body":{"classes/GameRepository.html":{},"classes/UserRepository.html":{}}}],["especial",{"_index":326,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["essa",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["esse",{"_index":531,"title":{},"body":{"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["est",{"_index":724,"title":{},"body":{"classes/UserRepository.html":{}}}],["excluído",{"_index":537,"title":{},"body":{"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["executioncontext",{"_index":588,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"guards/RolesGuard.html":{}}}],["expiresin",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseQueryParametersDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateGameDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"classes/ReturnGameDto.html":{},"classes/ReturnUserDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{}}}],["express",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":408,"title":{},"body":{"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["extname",{"_index":982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":574,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":578,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":431,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["file",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseQueryParametersDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateGameDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"classes/ReturnGameDto.html":{},"classes/ReturnUserDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filename",{"_index":1013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findall",{"_index":751,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findgamebyid",{"_index":495,"title":{},"body":{"controllers/GamesController.html":{},"injectables/GamesService.html":{}}}],["findgamebyid(@param('id",{"_index":527,"title":{},"body":{"controllers/GamesController.html":{}}}],["findgamebyid(gameid",{"_index":551,"title":{},"body":{"injectables/GamesService.html":{}}}],["findgamebyid(id",{"_index":503,"title":{},"body":{"controllers/GamesController.html":{}}}],["findgames",{"_index":496,"title":{},"body":{"controllers/GamesController.html":{},"injectables/GamesService.html":{}}}],["finduserbyid",{"_index":752,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["finduserbyid(@param('id",{"_index":797,"title":{},"body":{"controllers/UsersController.html":{}}}],["finduserbyid(id",{"_index":767,"title":{},"body":{"controllers/UsersController.html":{}}}],["finduserbyid(userid",{"_index":815,"title":{},"body":{"injectables/UsersService.html":{}}}],["findusers",{"_index":696,"title":{},"body":{"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findusers(@query",{"_index":792,"title":{},"body":{"controllers/UsersController.html":{}}}],["findusers(query",{"_index":770,"title":{},"body":{"controllers/UsersController.html":{}}}],["findusers(querydto",{"_index":705,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["findusersquerydto",{"_index":404,"title":{"classes/FindUsersQueryDto.html":{}},"body":{"classes/FindUsersQueryDto.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["foi",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GamesService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception",{"_index":512,"title":{},"body":{"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["format",{"_index":1008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":793,"title":{},"body":{"controllers/UsersController.html":{}}}],["framework",{"_index":906,"title":{},"body":{"index.html":{}}}],["function",{"_index":849,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":900,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["game",{"_index":421,"title":{"classes/Game.html":{}},"body":{"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"classes/ReturnGameDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["game.dto",{"_index":476,"title":{},"body":{"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{}}}],["game.dto.ts",{"_index":342,"title":{},"body":{"classes/CreateGameDto.html":{},"classes/ReturnGameDto.html":{},"classes/UpdateGameDto.html":{},"coverage.html":{}}}],["game.dto.ts:11",{"_index":649,"title":{},"body":{"classes/UpdateGameDto.html":{}}}],["game.dto.ts:14",{"_index":646,"title":{},"body":{"classes/UpdateGameDto.html":{}}}],["game.dto.ts:17",{"_index":648,"title":{},"body":{"classes/UpdateGameDto.html":{}}}],["game.dto.ts:2",{"_index":352,"title":{},"body":{"classes/CreateGameDto.html":{}}}],["game.dto.ts:3",{"_index":349,"title":{},"body":{"classes/CreateGameDto.html":{}}}],["game.dto.ts:4",{"_index":351,"title":{},"body":{"classes/CreateGameDto.html":{},"classes/ReturnGameDto.html":{}}}],["game.dto.ts:5",{"_index":348,"title":{},"body":{"classes/CreateGameDto.html":{},"classes/ReturnGameDto.html":{},"classes/UpdateGameDto.html":{}}}],["game.dto.ts:6",{"_index":350,"title":{},"body":{"classes/CreateGameDto.html":{}}}],["game.dto.ts:8",{"_index":647,"title":{},"body":{"classes/UpdateGameDto.html":{}}}],["game.entity",{"_index":474,"title":{},"body":{"classes/GameRepository.html":{},"injectables/GamesService.html":{},"classes/ReturnGameDto.html":{}}}],["game.find",{"_index":557,"title":{},"body":{"injectables/GamesService.html":{}}}],["game.genre",{"_index":483,"title":{},"body":{"classes/GameRepository.html":{},"injectables/GamesService.html":{}}}],["game.image_url",{"_index":481,"title":{},"body":{"classes/GameRepository.html":{},"injectables/GamesService.html":{}}}],["game.release_date",{"_index":484,"title":{},"body":{"classes/GameRepository.html":{},"injectables/GamesService.html":{}}}],["game.save",{"_index":485,"title":{},"body":{"classes/GameRepository.html":{},"injectables/GamesService.html":{}}}],["game.summary",{"_index":482,"title":{},"body":{"classes/GameRepository.html":{},"injectables/GamesService.html":{}}}],["game.title",{"_index":480,"title":{},"body":{"classes/GameRepository.html":{},"injectables/GamesService.html":{}}}],["game.users",{"_index":685,"title":{},"body":{"classes/User.html":{}}}],["gameid",{"_index":550,"title":{},"body":{"injectables/GamesService.html":{}}}],["gamerepository",{"_index":466,"title":{"classes/GameRepository.html":{}},"body":{"classes/GameRepository.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"coverage.html":{}}}],["games",{"_index":357,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["games.controller",{"_index":542,"title":{},"body":{"modules/GamesModule.html":{}}}],["games.repository",{"_index":541,"title":{},"body":{"modules/GamesModule.html":{},"injectables/GamesService.html":{}}}],["games.service",{"_index":519,"title":{},"body":{"controllers/GamesController.html":{},"modules/GamesModule.html":{}}}],["games/games.module",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["gamescontroller",{"_index":492,"title":{"controllers/GamesController.html":{}},"body":{"controllers/GamesController.html":{},"modules/GamesModule.html":{},"coverage.html":{}}}],["gamesmodule",{"_index":8,"title":{"modules/GamesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{},"modules.html":{},"overview.html":{}}}],["gamesservice",{"_index":518,"title":{"injectables/GamesService.html":{}},"body":{"controllers/GamesController.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"coverage.html":{},"overview.html":{}}}],["genre",{"_index":343,"title":{},"body":{"classes/CreateGameDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"injectables/GamesService.html":{},"classes/UpdateGameDto.html":{}}}],["get('/:id",{"_index":526,"title":{},"body":{"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["get('/:id')@apiokresponse({description",{"_index":768,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id')@role(userrole.admin",{"_index":504,"title":{},"body":{"controllers/GamesController.html":{}}}],["get('/all",{"_index":789,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/all')@apiokresponse({description",{"_index":764,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/me",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/me')@useguards(undefined",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apiokresponse({description",{"_index":771,"title":{},"body":{"controllers/UsersController.html":{}}}],["getme",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{}}}],["getme(@getuser",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["getme(user",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["getting",{"_index":902,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["grow",{"_index":937,"title":{},"body":{"index.html":{}}}],["guard",{"_index":628,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":629,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handlebars",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hash",{"_index":688,"title":{},"body":{"classes/User.html":{}}}],["hashpassword",{"_index":697,"title":{},"body":{"classes/UserRepository.html":{}}}],["hashpassword(password",{"_index":708,"title":{},"body":{"classes/UserRepository.html":{}}}],["hbs",{"_index":983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["here",{"_index":948,"title":{},"body":{"index.html":{}}}],["host",{"_index":990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":955,"title":{},"body":{"index.html":{}}}],["id",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Game.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["idade",{"_index":360,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["identifier",{"_index":831,"title":{},"body":{"coverage.html":{}}}],["ilike",{"_index":734,"title":{},"body":{"classes/UserRepository.html":{}}}],["image_url",{"_index":344,"title":{},"body":{"classes/CreateGameDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"injectables/GamesService.html":{},"classes/UpdateGameDto.html":{}}}],["implements",{"_index":599,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"classes/ReturnGameDto.html":{},"classes/ReturnUserDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GamesModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":57,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseQueryParametersDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateGameDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"classes/ReturnGameDto.html":{},"classes/ReturnUserDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseQueryParametersDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateGameDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"classes/ReturnGameDto.html":{},"classes/ReturnUserDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["informado",{"_index":564,"title":{},"body":{"injectables/GamesService.html":{},"injectables/UsersService.html":{}}}],["informe",{"_index":304,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["inherited",{"_index":416,"title":{},"body":{"classes/FindUsersQueryDto.html":{}}}],["inject",{"_index":596,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["injectable",{"_index":201,"title":{"injectables/AuthService.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["injectrepository(gamerepository",{"_index":555,"title":{},"body":{"injectables/GamesService.html":{}}}],["injectrepository(userrepository",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["installation",{"_index":915,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":917,"title":{},"body":{"index.html":{}}}],["instruções",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["integer",{"_index":660,"title":{},"body":{"classes/User.html":{}}}],["intercept",{"_index":582,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["intercept(context",{"_index":587,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["interceptors/logger.interceptor",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["internalservererrorexception",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"classes/GameRepository.html":{},"injectables/GamesService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["inválidas",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["inválido",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty",{"_index":333,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["isnotempty({message",{"_index":303,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["isnumber",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional",{"_index":645,"title":{},"body":{"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isemail",{"_index":650,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isoptional()@isstring({message",{"_index":654,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring",{"_index":329,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty({message",{"_index":372,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring({each",{"_index":382,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["j",{"_index":489,"title":{},"body":{"classes/GameRepository.html":{},"classes/UserRepository.html":{}}}],["jogo",{"_index":491,"title":{},"body":{"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{}}}],["jogos",{"_index":380,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":944,"title":{},"body":{"index.html":{}}}],["jointable",{"_index":458,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["json.parse(querydto.sort",{"_index":741,"title":{},"body":{"classes/UserRepository.html":{}}}],["jwt",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{},"modules/GamesModule.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":577,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":181,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":952,"title":{},"body":{"index.html":{}}}],["layoutsdir",{"_index":984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["length",{"_index":433,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["letra",{"_index":321,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["level",{"_index":1004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["levels",{"_index":1002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":958,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":934,"title":{},"body":{"index.html":{}}}],["limit",{"_index":293,"title":{},"body":{"classes/BaseQueryParametersDto.html":{},"classes/FindUsersQueryDto.html":{}}}],["listar",{"_index":790,"title":{},"body":{"controllers/UsersController.html":{}}}],["listar'})@apiforbiddenresponse({description",{"_index":765,"title":{},"body":{"controllers/UsersController.html":{}}}],["literal",{"_index":569,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["localhost",{"_index":991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":583,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["log(req",{"_index":593,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["logger",{"_index":585,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["loggerinterceptor",{"_index":27,"title":{"injectables/LoggerInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerInterceptor.html":{},"coverage.html":{}}}],["logs",{"_index":1016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["madeby",{"_index":621,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["mail",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserRepository.html":{}}}],["mail'})@isemail",{"_index":374,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mailerconfig",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mailermodule",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule.forroot(mailerconfig",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["maileroptions",{"_index":975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mailerservice",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["mails",{"_index":822,"title":{},"body":{"injectables/UsersService.html":{}}}],["maiúscula",{"_index":322,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["manytomany",{"_index":457,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["manytomany(undefined",{"_index":444,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["matches",{"_index":332,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":339,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["matching",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseQueryParametersDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateGameDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"classes/ReturnGameDto.html":{},"classes/ReturnUserDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":331,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(200",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(32",{"_index":337,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["maxlength(60",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["menos",{"_index":320,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["message",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"controllers/GamesController.html":{},"classes/ReturnGameDto.html":{},"classes/ReturnUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{}}}],["metadata",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":612,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["methods",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":330,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":335,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["minúscula",{"_index":323,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["miscellaneous",{"_index":894,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":933,"title":{},"body":{"index.html":{}}}],["mode",{"_index":923,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GamesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GamesModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GamesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["more",{"_index":947,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":953,"title":{},"body":{"index.html":{}}}],["máximo",{"_index":312,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["mínimo",{"_index":309,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["name",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"index.html":{}}}],["nestframework",{"_index":957,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":597,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["nestjs",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"guards/RolesGuard.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GamesController.html":{},"modules/GamesModule.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestwinstonmoduleutilities.format.nestlike",{"_index":1011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":589,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["next.handle",{"_index":602,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["node.js",{"_index":905,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["nome",{"_index":388,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["noreply@steam.com",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GamesService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('jogo",{"_index":560,"title":{},"body":{"injectables/GamesService.html":{}}}],["notfoundexception('token",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('usuário",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["npm",{"_index":916,"title":{},"body":{"index.html":{}}}],["null",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"classes/Game.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["nullable",{"_index":461,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["number",{"_index":296,"title":{},"body":{"classes/BaseQueryParametersDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUsersQueryDto.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["não",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["número",{"_index":324,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["o",{"_index":368,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GameRepository.html":{},"injectables/GamesService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["observable",{"_index":592,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"guards/RolesGuard.html":{}}}],["open",{"_index":935,"title":{},"body":{"index.html":{}}}],["optional",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["os",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GamesService.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GamesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":962,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":855,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":294,"title":{},"body":{"classes/BaseQueryParametersDto.html":{},"classes/FindUsersQueryDto.html":{}}}],["para",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["param",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["param('token",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["parameters",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parameters.dto",{"_index":420,"title":{},"body":{"classes/FindUsersQueryDto.html":{}}}],["parameters.dto.ts",{"_index":291,"title":{},"body":{"classes/BaseQueryParametersDto.html":{},"coverage.html":{}}}],["parameters.dto.ts:2",{"_index":299,"title":{},"body":{"classes/BaseQueryParametersDto.html":{}}}],["parameters.dto.ts:3",{"_index":298,"title":{},"body":{"classes/BaseQueryParametersDto.html":{}}}],["parameters.dto.ts:4",{"_index":297,"title":{},"body":{"classes/BaseQueryParametersDto.html":{}}}],["params",{"_index":618,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["passport",{"_index":575,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{},"modules/GamesModule.html":{},"modules/UsersModule.html":{}}}],["passportmodule.register",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{},"modules/GamesModule.html":{},"modules/UsersModule.html":{}}}],["passportstrategy",{"_index":572,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":576,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["password')@useguards(undefined",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.dto",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["password.dto.ts",{"_index":302,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:18",{"_index":327,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:28",{"_index":328,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password/:token",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["passwordconfirmation",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["patch('/:id",{"_index":509,"title":{},"body":{"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["patch('/:id')@apiokresponse({description",{"_index":773,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('/reset",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(':id/change",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(':token",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["path.resolve(__dirname",{"_index":977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":571,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["país",{"_index":366,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["país'})@maxlength(60",{"_index":369,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["pelo",{"_index":319,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["permissão",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["permitido",{"_index":759,"title":{},"body":{"controllers/UsersController.html":{}}}],["permitido'})@role(userrole.admin",{"_index":756,"title":{},"body":{"controllers/UsersController.html":{}}}],["pg",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["pgpassword",{"_index":995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":945,"title":{},"body":{"index.html":{}}}],["port",{"_index":992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["post('/adm",{"_index":786,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/adm')@apicreatedresponse({description",{"_index":754,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/send",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apicreatedresponse({description",{"_index":758,"title":{},"body":{"controllers/UsersController.html":{}}}],["post()@role(userrole.admin",{"_index":498,"title":{},"body":{"controllers/GamesController.html":{}}}],["postgres",{"_index":989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":455,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":435,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["private",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":925,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":904,"title":{},"body":{"index.html":{}}}],["project",{"_index":936,"title":{},"body":{"index.html":{}}}],["promise",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":292,"title":{},"body":{"classes/BaseQueryParametersDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateGameDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"classes/ReturnGameDto.html":{},"classes/ReturnUserDto.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["provide",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GamesModule.html":{},"modules/UsersModule.html":{}}}],["query",{"_index":290,"title":{},"body":{"classes/BaseQueryParametersDto.html":{},"classes/FindUsersQueryDto.html":{},"injectables/LoggerInterceptor.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["query.andwhere('user.email",{"_index":733,"title":{},"body":{"classes/UserRepository.html":{}}}],["query.andwhere('user.role",{"_index":736,"title":{},"body":{"classes/UserRepository.html":{}}}],["query.andwhere('user.username",{"_index":735,"title":{},"body":{"classes/UserRepository.html":{}}}],["query.dto",{"_index":712,"title":{},"body":{"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query.dto.ts",{"_index":407,"title":{},"body":{"classes/FindUsersQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:4",{"_index":415,"title":{},"body":{"classes/FindUsersQueryDto.html":{}}}],["query.dto.ts:5",{"_index":411,"title":{},"body":{"classes/FindUsersQueryDto.html":{}}}],["query.dto.ts:6",{"_index":414,"title":{},"body":{"classes/FindUsersQueryDto.html":{}}}],["query.dto.ts:7",{"_index":412,"title":{},"body":{"classes/FindUsersQueryDto.html":{}}}],["query.getmanyandcount",{"_index":744,"title":{},"body":{"classes/UserRepository.html":{}}}],["query.orderby(querydto.sort",{"_index":740,"title":{},"body":{"classes/UserRepository.html":{}}}],["query.select(['user.username",{"_index":742,"title":{},"body":{"classes/UserRepository.html":{}}}],["query.skip((querydto.page",{"_index":737,"title":{},"body":{"classes/UserRepository.html":{}}}],["query.take(querydto.limit",{"_index":739,"title":{},"body":{"classes/UserRepository.html":{}}}],["query.where('user.status",{"_index":732,"title":{},"body":{"classes/UserRepository.html":{}}}],["querydto",{"_index":707,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["querydto.limit",{"_index":729,"title":{},"body":{"classes/UserRepository.html":{}}}],["querydto.page",{"_index":727,"title":{},"body":{"classes/UserRepository.html":{}}}],["querydto.status",{"_index":730,"title":{},"body":{"classes/UserRepository.html":{}}}],["randombytes",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["randombytes(32).tostring('hex",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["read",{"_index":946,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":637,"title":{},"body":{"guards/RolesGuard.html":{}}}],["realizado",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["realizar",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["recover",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["recovertoken",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{}}}],["recuperação",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["recurso",{"_index":532,"title":{},"body":{"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":633,"title":{},"body":{"guards/RolesGuard.html":{}}}],["relations",{"_index":558,"title":{},"body":{"injectables/GamesService.html":{},"injectables/UsersService.html":{}}}],["release_date",{"_index":345,"title":{},"body":{"classes/CreateGameDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"injectables/GamesService.html":{},"classes/UpdateGameDto.html":{}}}],["repository",{"_index":468,"title":{},"body":{"classes/GameRepository.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["req",{"_index":595,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["req.args[0].user",{"_index":974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.body",{"_index":603,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["req.ip",{"_index":620,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["req.method",{"_index":613,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["req.params",{"_index":619,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["req.query",{"_index":617,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["req.route.path",{"_index":615,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["request",{"_index":638,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request.user.role",{"_index":640,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredrole",{"_index":641,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GamesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resetpassword",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(recovertoken",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassword(token",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["result",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GamesService.html":{},"injectables/UsersService.html":{}}}],["result.affected",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GamesService.html":{},"injectables/UsersService.html":{}}}],["results",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseQueryParametersDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateGameDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"classes/ReturnGameDto.html":{},"classes/ReturnUserDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returngamedto",{"_index":513,"title":{"classes/ReturnGameDto.html":{}},"body":{"controllers/GamesController.html":{},"classes/ReturnGameDto.html":{},"coverage.html":{}}}],["returns",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returnuserdto",{"_index":623,"title":{"classes/ReturnUserDto.html":{}},"body":{"classes/ReturnUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["rimraf",{"_index":886,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":409,"title":{},"body":{"classes/FindUsersQueryDto.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["role(userrole.admin",{"_index":523,"title":{},"body":{"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["roles.enum",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"classes/UpdateUserDto.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["roles.enum.ts",{"_index":897,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["rolesguard",{"_index":515,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/GamesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["route",{"_index":614,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["run",{"_index":920,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":598,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["salt",{"_index":657,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["salvar",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"classes/GameRepository.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["scalable",{"_index":909,"title":{},"body":{"index.html":{}}}],["secret",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["secretorkey",{"_index":579,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["sendrecoverpasswordemail",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["sendrecoverpasswordemail(email",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["senha",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["senha'})@minlength(8",{"_index":306,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["senhas",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["server",{"_index":910,"title":{},"body":{"index.html":{}}}],["setmetadata('role",{"_index":987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seu",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["side",{"_index":911,"title":{},"body":{"index.html":{}}}],["signin",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(credentialsdto",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(createuserdto",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["smtp://janicecaldeira.dev@gmail.com:nice.dev.blue@smtp.gmail.com",{"_index":986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sort",{"_index":295,"title":{},"body":{"classes/BaseQueryParametersDto.html":{},"classes/FindUsersQueryDto.html":{}}}],["source",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseQueryParametersDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateGameDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"classes/ReturnGameDto.html":{},"classes/ReturnUserDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":939,"title":{},"body":{"index.html":{}}}],["src/.../get",{"_index":968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mailer.config.ts",{"_index":969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":901,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.decorator.ts",{"_index":970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../typeorm.config.ts",{"_index":971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":896,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../winston.config.ts",{"_index":972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":16,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:26",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:36",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:43",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:49",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:59",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:69",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:87",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:108",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:127",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:29",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:53",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:66",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:74",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:95",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/change",{"_index":301,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/auth/credentials.dto.ts",{"_index":401,"title":{},"body":{"classes/CredentialsDto.html":{},"coverage.html":{}}}],["src/auth/credentials.dto.ts:2",{"_index":402,"title":{},"body":{"classes/CredentialsDto.html":{}}}],["src/auth/credentials.dto.ts:3",{"_index":403,"title":{},"body":{"classes/CredentialsDto.html":{}}}],["src/auth/get",{"_index":521,"title":{},"body":{"controllers/GamesController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":565,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:18",{"_index":570,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:8",{"_index":567,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/role.decorator.ts",{"_index":839,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/roles.guard",{"_index":516,"title":{},"body":{"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["src/auth/roles.guard.ts",{"_index":630,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/roles.guard.ts:6",{"_index":634,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/roles.guard.ts:9",{"_index":636,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/configs/mailer.config.ts",{"_index":840,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configs/typeorm.config.ts",{"_index":841,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configs/winston.config.ts",{"_index":842,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/games/dtos/create",{"_index":341,"title":{},"body":{"classes/CreateGameDto.html":{},"coverage.html":{}}}],["src/games/dtos/return",{"_index":622,"title":{},"body":{"classes/ReturnGameDto.html":{},"coverage.html":{}}}],["src/games/dtos/update",{"_index":644,"title":{},"body":{"classes/UpdateGameDto.html":{},"coverage.html":{}}}],["src/games/game.entity",{"_index":682,"title":{},"body":{"classes/User.html":{}}}],["src/games/game.entity.ts",{"_index":422,"title":{},"body":{"classes/Game.html":{},"coverage.html":{}}}],["src/games/game.entity.ts:18",{"_index":436,"title":{},"body":{"classes/Game.html":{}}}],["src/games/game.entity.ts:21",{"_index":441,"title":{},"body":{"classes/Game.html":{}}}],["src/games/game.entity.ts:24",{"_index":437,"title":{},"body":{"classes/Game.html":{}}}],["src/games/game.entity.ts:27",{"_index":440,"title":{},"body":{"classes/Game.html":{}}}],["src/games/game.entity.ts:30",{"_index":434,"title":{},"body":{"classes/Game.html":{}}}],["src/games/game.entity.ts:33",{"_index":438,"title":{},"body":{"classes/Game.html":{}}}],["src/games/game.entity.ts:36",{"_index":429,"title":{},"body":{"classes/Game.html":{}}}],["src/games/game.entity.ts:39",{"_index":443,"title":{},"body":{"classes/Game.html":{}}}],["src/games/game.entity.ts:45",{"_index":448,"title":{},"body":{"classes/Game.html":{}}}],["src/games/game.entity.ts:47",{"_index":450,"title":{},"body":{"classes/Game.html":{}}}],["src/games/games.controller.ts",{"_index":493,"title":{},"body":{"controllers/GamesController.html":{},"coverage.html":{}}}],["src/games/games.controller.ts:31",{"_index":499,"title":{},"body":{"controllers/GamesController.html":{}}}],["src/games/games.controller.ts:42",{"_index":506,"title":{},"body":{"controllers/GamesController.html":{}}}],["src/games/games.controller.ts:48",{"_index":505,"title":{},"body":{"controllers/GamesController.html":{}}}],["src/games/games.controller.ts:57",{"_index":510,"title":{},"body":{"controllers/GamesController.html":{}}}],["src/games/games.controller.ts:73",{"_index":502,"title":{},"body":{"controllers/GamesController.html":{}}}],["src/games/games.module.ts",{"_index":540,"title":{},"body":{"modules/GamesModule.html":{}}}],["src/games/games.repository.ts",{"_index":467,"title":{},"body":{"classes/GameRepository.html":{},"coverage.html":{}}}],["src/games/games.repository.ts:12",{"_index":471,"title":{},"body":{"classes/GameRepository.html":{}}}],["src/games/games.service.ts",{"_index":544,"title":{},"body":{"injectables/GamesService.html":{},"coverage.html":{}}}],["src/games/games.service.ts:14",{"_index":546,"title":{},"body":{"injectables/GamesService.html":{}}}],["src/games/games.service.ts:20",{"_index":547,"title":{},"body":{"injectables/GamesService.html":{}}}],["src/games/games.service.ts:24",{"_index":553,"title":{},"body":{"injectables/GamesService.html":{}}}],["src/games/games.service.ts:30",{"_index":552,"title":{},"body":{"injectables/GamesService.html":{}}}],["src/games/games.service.ts:40",{"_index":554,"title":{},"body":{"injectables/GamesService.html":{}}}],["src/games/games.service.ts:59",{"_index":549,"title":{},"body":{"injectables/GamesService.html":{}}}],["src/interceptors/logger.interceptor.ts",{"_index":581,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/logger.interceptor.ts:12",{"_index":586,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["src/interceptors/logger.interceptor.ts:14",{"_index":591,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["src/interceptors/logger.interceptor.ts:19",{"_index":594,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["src/main.ts",{"_index":848,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/base",{"_index":289,"title":{},"body":{"classes/BaseQueryParametersDto.html":{},"classes/FindUsersQueryDto.html":{},"coverage.html":{}}}],["src/users/dtos/create",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/find",{"_index":405,"title":{},"body":{"classes/FindUsersQueryDto.html":{},"coverage.html":{}}}],["src/users/dtos/return",{"_index":624,"title":{},"body":{"classes/ReturnUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/update",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/user",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/user.entity",{"_index":452,"title":{},"body":{"classes/Game.html":{},"controllers/GamesController.html":{}}}],["src/users/user.entity.ts",{"_index":656,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:21",{"_index":670,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:24",{"_index":666,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:27",{"_index":677,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:30",{"_index":664,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:33",{"_index":661,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:36",{"_index":673,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:39",{"_index":675,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:42",{"_index":671,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:45",{"_index":674,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:48",{"_index":663,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:51",{"_index":672,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:54",{"_index":665,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:57",{"_index":676,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:61",{"_index":669,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:63",{"_index":679,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:70",{"_index":681,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":749,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:100",{"_index":775,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:118",{"_index":763,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:41",{"_index":760,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:55",{"_index":757,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:68",{"_index":766,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:76",{"_index":772,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:89",{"_index":769,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":804,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.repository",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["src/users/users.repository.ts",{"_index":692,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/users/users.repository.ts:102",{"_index":709,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/users/users.repository.ts:106",{"_index":700,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/users/users.repository.ts:17",{"_index":704,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/users/users.repository.ts:49",{"_index":706,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/users/users.repository.ts:84",{"_index":698,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/users/users.repository.ts:92",{"_index":702,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/users/users.service.ts",{"_index":807,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:16",{"_index":808,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:22",{"_index":810,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:32",{"_index":809,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:40",{"_index":814,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:46",{"_index":817,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:53",{"_index":816,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":818,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:81",{"_index":812,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":921,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":924,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":926,"title":{},"body":{"index.html":{}}}],["started",{"_index":903,"title":{"index.html":{}},"body":{}}],["starter",{"_index":914,"title":{},"body":{"index.html":{}}}],["statements",{"_index":832,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":410,"title":{},"body":{"classes/FindUsersQueryDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["stay",{"_index":949,"title":{},"body":{"index.html":{}}}],["steam",{"_index":994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":573,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseQueryParametersDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateGameDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"classes/ReturnGameDto.html":{},"classes/ReturnUserDto.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sua",{"_index":364,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["subject",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["sucesso",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":346,"title":{},"body":{"classes/CreateGameDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"injectables/GamesService.html":{},"classes/UpdateGameDto.html":{}}}],["super",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["support",{"_index":940,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":960,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":889,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":1000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":854,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":853,"title":{},"body":{"coverage.html":{}}}],["tem",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["template",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["templates",{"_index":978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ter",{"_index":308,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["test",{"_index":929,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":932,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":931,"title":{},"body":{"index.html":{}}}],["tests",{"_index":928,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":938,"title":{},"body":{"index.html":{}}}],["this.authservice.changepassword(id",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.confirmemail(token",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword(token",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.sendrecoverpasswordemail(email",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(credentialsdto",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.changepassword(user.id.tostring",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.checkage(age",{"_index":716,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.create",{"_index":479,"title":{},"body":{"classes/GameRepository.html":{},"classes/UserRepository.html":{}}}],["this.createquerybuilder('user",{"_index":731,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.findgamebyid(id",{"_index":561,"title":{},"body":{"injectables/GamesService.html":{}}}],["this.findone",{"_index":746,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.findone(id",{"_index":745,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.finduserbyid(id",{"_index":827,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.gamerepository.creategame(creategamedto",{"_index":556,"title":{},"body":{"injectables/GamesService.html":{}}}],["this.gamerepository.delete",{"_index":563,"title":{},"body":{"injectables/GamesService.html":{}}}],["this.gamerepository.findone(gameid",{"_index":559,"title":{},"body":{"injectables/GamesService.html":{}}}],["this.games",{"_index":686,"title":{},"body":{"classes/User.html":{}}}],["this.games.push(game",{"_index":687,"title":{},"body":{"classes/User.html":{}}}],["this.gamesservice.creategame(creategamedto",{"_index":524,"title":{},"body":{"controllers/GamesController.html":{}}}],["this.gamesservice.deleteuser(id",{"_index":536,"title":{},"body":{"controllers/GamesController.html":{}}}],["this.gamesservice.findgamebyid(id",{"_index":528,"title":{},"body":{"controllers/GamesController.html":{}}}],["this.gamesservice.findgames",{"_index":525,"title":{},"body":{"controllers/GamesController.html":{}}}],["this.gamesservice.updategame(updategamedto",{"_index":533,"title":{},"body":{"controllers/GamesController.html":{}}}],["this.hashpassword(password",{"_index":722,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.jwtservice.sign(jwtpayload",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.log(context.switchtohttp().getrequest",{"_index":601,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["this.logger.info('log",{"_index":609,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["this.mailerservice.sendmail(mail",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.password",{"_index":691,"title":{},"body":{"classes/User.html":{}}}],["this.reflector.get",{"_index":642,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.salt",{"_index":690,"title":{},"body":{"classes/User.html":{}}}],["this.userrepository.changepassword(id",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.checkcredentials(credentialsdto",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.createuser",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.createuser(createuserdto",{"_index":823,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.delete",{"_index":828,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":824,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.findone(id",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.userrepository.findone(userid",{"_index":826,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findusers(querydto",{"_index":825,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.update",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.users",{"_index":463,"title":{},"body":{"classes/Game.html":{}}}],["this.users.push(user",{"_index":465,"title":{},"body":{"classes/Game.html":{}}}],["this.usersservice.createadminuser(createuserdto",{"_index":787,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":785,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(id",{"_index":801,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":791,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.finduserbyid(id",{"_index":798,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findusers(query",{"_index":794,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateuser(updateuserdto",{"_index":799,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["timestamp",{"_index":610,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["title",{"_index":347,"title":{},"body":{"classes/CreateGameDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"injectables/GamesService.html":{},"classes/UpdateGameDto.html":{}}}],["token",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["total",{"_index":743,"title":{},"body":{"classes/UserRepository.html":{}}}],["touch",{"_index":950,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["transport",{"_index":985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transports",{"_index":1006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":383,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Game.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["true})@jointable",{"_index":447,"title":{},"body":{"classes/Game.html":{}}}],["try",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"classes/GameRepository.html":{},"injectables/GamesService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":956,"title":{},"body":{"index.html":{}}}],["type",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseQueryParametersDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateGameDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"classes/ReturnGameDto.html":{},"classes/ReturnUserDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":459,"title":{},"body":{"classes/Game.html":{},"classes/GameRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["typeormconfig",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GamesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([gamerepository",{"_index":543,"title":{},"body":{"modules/GamesModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forroot(typeormconfig",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types/dotenv",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":913,"title":{},"body":{"index.html":{}}}],["ui",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["um",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"injectables/GamesService.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["uma",{"_index":305,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["unauthorizedexception",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserRepository.html":{}}}],["unauthorizedexception('credenciais",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('usuário",{"_index":580,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":445,"title":{},"body":{"classes/Game.html":{},"classes/UserRepository.html":{}}}],["undefined)@jointable({name",{"_index":667,"title":{},"body":{"classes/User.html":{}}}],["unique",{"_index":454,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["unique(['email",{"_index":684,"title":{},"body":{"classes/User.html":{}}}],["unique(['id",{"_index":460,"title":{},"body":{"classes/Game.html":{}}}],["unit",{"_index":927,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GamesController.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unprocessableentityexception",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["unprocessableentityexception('as",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["unprocessableentityexception('os",{"_index":821,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatedat",{"_index":425,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["updatedatecolumn",{"_index":442,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["updategame",{"_index":497,"title":{},"body":{"controllers/GamesController.html":{},"injectables/GamesService.html":{}}}],["updategame(updategamedto",{"_index":507,"title":{},"body":{"controllers/GamesController.html":{},"injectables/GamesService.html":{}}}],["updategamedto",{"_index":508,"title":{"classes/UpdateGameDto.html":{}},"body":{"controllers/GamesController.html":{},"injectables/GamesService.html":{},"classes/UpdateGameDto.html":{},"coverage.html":{}}}],["updateuser",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuser(updateuserdto",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":222,"title":{"classes/UpdateUserDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["useclass",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":70,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Game.html":{},"controllers/GamesController.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"classes/ReturnUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.age",{"_index":715,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.checkpassword(password",{"_index":747,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.confirmationtoken",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["user.country",{"_index":714,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.decorator",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":836,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":353,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReturnUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":655,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:14",{"_index":652,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:17",{"_index":653,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:21",{"_index":377,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:32",{"_index":379,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:4",{"_index":626,"title":{},"body":{"classes/ReturnUserDto.html":{}}}],["user.dto.ts:44",{"_index":371,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:5",{"_index":625,"title":{},"body":{"classes/ReturnUserDto.html":{}}}],["user.dto.ts:53",{"_index":365,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:63",{"_index":390,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:7",{"_index":651,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:73",{"_index":385,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:85",{"_index":387,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:93",{"_index":384,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["user.entity",{"_index":627,"title":{},"body":{"classes/ReturnUserDto.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.games",{"_index":462,"title":{},"body":{"classes/Game.html":{}}}],["user.id",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["user.id.tostring",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.password",{"_index":721,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.recovertoken",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["user.role",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.salt",{"_index":719,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.save",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["user.status",{"_index":717,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["user.username",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["user_games",{"_index":668,"title":{},"body":{"classes/User.html":{}}}],["useremail",{"_index":607,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["userid",{"_index":813,"title":{},"body":{"injectables/UsersService.html":{}}}],["username",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/FindUsersQueryDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":185,"title":{"classes/UserRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userrole",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.admin",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userrole.user",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["users",{"_index":406,"title":{},"body":{"classes/FindUsersQueryDto.html":{},"classes/Game.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":806,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.repository",{"_index":805,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":777,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user",{"_index":477,"title":{},"body":{"classes/GameRepository.html":{},"controllers/GamesController.html":{},"injectables/GamesService.html":{}}}],["users/user.entity",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/users.module",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.repository",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{}}}],["userscontroller",{"_index":748,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":9,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":776,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uso",{"_index":726,"title":{},"body":{"classes/UserRepository.html":{}}}],["usuário",{"_index":361,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["usuário'})@maxlength(200",{"_index":389,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["usuários",{"_index":795,"title":{},"body":{"controllers/UsersController.html":{}}}],["validate",{"_index":566,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":568,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationpipe",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["validator",{"_index":334,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateGameDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":899,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":432,"title":{},"body":{"classes/Game.html":{},"classes/User.html":{}}}],["variable",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":967,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbose",{"_index":1005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["voc",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GamesController.html":{},"controllers/UsersController.html":{}}}],["void",{"_index":451,"title":{},"body":{"classes/Game.html":{},"injectables/LoggerInterceptor.html":{},"classes/User.html":{}}}],["válida",{"_index":338,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["válida'})@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":315,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["válido",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["válido'})@maxlength(200",{"_index":375,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["watch",{"_index":922,"title":{},"body":{"index.html":{}}}],["website",{"_index":954,"title":{},"body":{"index.html":{}}}],["winston",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerInterceptor.html":{},"dependencies.html":{}}}],["winston.config.npm.levels",{"_index":1003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.combine",{"_index":1009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.timestamp",{"_index":1010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.transports.console",{"_index":1007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.transports.file",{"_index":1012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winstonconfig",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["winstonmodule",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule.forroot(winstonconfig",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmoduleoptions",{"_index":1001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["you'd",{"_index":943,"title":{},"body":{"index.html":{}}}],["z",{"_index":317,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["z])(?=.*[a",{"_index":316,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["zoom",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GamesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nGamesModule\n\nGamesModule\n\nAppModule -->\n\nGamesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            GamesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeOrmConfig } from './configs/typeorm.config';\nimport { UsersModule } from './users/users.module';\nimport { GamesModule } from './games/games.module';\nimport { AuthModule } from './auth/auth.module';\nimport { LoggerInterceptor } from './interceptors/logger.interceptor';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { WinstonModule } from 'nest-winston';\nimport { winstonConfig } from './configs/winston.config';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { mailerConfig } from './configs/mailer.config';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(typeOrmConfig),\n    WinstonModule.forRoot(winstonConfig),\n    MailerModule.forRoot(mailerConfig),\n    UsersModule,\n    GamesModule,\n    AuthModule,\n  ],\n  controllers: [],\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: LoggerInterceptor,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                confirmEmail\n                            \n                            \n                                getMe\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                sendRecoverPasswordEmail\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(id: string, changePasswordDto: ChangePasswordDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/change-password')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    changePasswordDto\n                                    \n                                                ChangePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':token')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMe\n                        \n                    \n                \n            \n            \n                \ngetMe(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/me')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(token: string, changePasswordDto: ChangePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/reset-password/:token')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    changePasswordDto\n                                    \n                                                ChangePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendRecoverPasswordEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendRecoverPasswordEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/send-recover-email')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(credentialsDto: CredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    credentialsDto\n                                    \n                                                CredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  ValidationPipe,\n  Get,\n  UseGuards,\n  Patch,\n  Param,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { CreateUserDto } from 'src/users/dtos/create-user.dto';\nimport { CredentialsDto } from './credentials.dto';\nimport { AuthGuard } from '@nestjs/passport';\nimport { User } from '../users/user.entity';\nimport { GetUser } from './get-user.decorator';\nimport { ChangePasswordDto } from './change-password.dto';\nimport { UserRole } from 'src/users/user-roles.enum';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('/signup')\n  async signUp(\n    @Body(ValidationPipe) createUserDto: CreateUserDto,\n  ): Promise {\n    await this.authService.signUp(createUserDto);\n    return {\n      message: 'Cadastro realizado com sucesso',\n    };\n  }\n\n  @Post('/signin')\n  async signIn(\n    @Body(ValidationPipe) credentialsDto: CredentialsDto,\n  ): Promise {\n    return await this.authService.signIn(credentialsDto);\n  }\n\n  @Patch(':token')\n  async confirmEmail(@Param('token') token: string) {\n    const user = await this.authService.confirmEmail(token);\n    return { message: 'E-mail confirmado' };\n  }\n\n  @Post('/send-recover-email')\n  async sendRecoverPasswordEmail(\n    @Body('email') email: string,\n  ): Promise {\n    await this.authService.sendRecoverPasswordEmail(email);\n    return {\n      message: 'Foi enviado um e-mail com instruções para alteração de senha',\n    };\n  }\n\n  @Patch('/reset-password/:token')\n  async resetPassword(\n    @Param('token') token: string,\n    @Body(ValidationPipe) changePasswordDto: ChangePasswordDto,\n  ): Promise {\n    await this.authService.resetPassword(token, changePasswordDto);\n    return { message: 'Senha alterada com sucesso!' };\n  }\n\n  @Patch(':id/change-password')\n  @UseGuards(AuthGuard())\n  async changePassword(\n    @Param('id') id: string,\n    @Body(ValidationPipe) changePasswordDto: ChangePasswordDto,\n    @GetUser() user: User,\n  ) {\n    if (user.role != UserRole.ADMIN && user.id.toString() != id)\n      throw new UnauthorizedException(\n        'Você não tem permissão para realizar essa alteração',\n      );\n\n    await this.authService.changePassword(id, changePasswordDto);\n    return {\n      message: 'Senha alterada com sucesso!',\n    };\n  }\n\n  @Get('/me')\n  @UseGuards(AuthGuard())\n  getMe(@GetUser() user: User): User {\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserRepository } from '../users/users.repository';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserRepository]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: 'super-secret',\n      signOptions: {\n        expiresIn: 18000,\n      },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                sendRecoverPasswordEmail\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, jwtService: JwtService, mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(id: string, changePassworDto: ChangePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    changePassworDto\n                                    \n                                                ChangePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(confirmationToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmationToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(recoverToken: string, changePasswordDto: ChangePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    recoverToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    changePasswordDto\n                                    \n                                                ChangePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendRecoverPasswordEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendRecoverPasswordEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(credentialsDto: CredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    credentialsDto\n                                    \n                                                CredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(updateUserDto: UpdateUserDto, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n  UnauthorizedException,\n  UnprocessableEntityException,\n} from '@nestjs/common';\nimport { UserRepository } from 'src/users/users.repository';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from 'src/users/dtos/create-user.dto';\nimport { CredentialsDto } from './credentials.dto';\nimport { User } from '../users/user.entity';\nimport { UserRole } from 'src/users/user-roles.enum';\nimport { JwtService } from '@nestjs/jwt';\nimport { MailerService } from '@nestjs-modules/mailer';\nimport { randomBytes } from 'crypto';\nimport { ChangePasswordDto } from './change-password.dto';\nimport { UpdateUserDto } from 'src/users/dtos/update-user.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(UserRepository)\n    private userRepository: UserRepository,\n    private jwtService: JwtService,\n    private mailerService: MailerService,\n  ) {}\n\n  async signUp(createUserDto: CreateUserDto): Promise {\n    if (createUserDto.password != createUserDto.passwordConfirmation) {\n      throw new UnprocessableEntityException('As senhas não conferem');\n    } else {\n      const user = await this.userRepository.createUser(\n        createUserDto,\n        UserRole.USER,\n      );\n\n      const mail = {\n        to: user.email,\n        from: 'noreply@steam.com',\n        subject: 'Confirme seu e-mail',\n        template: './email-confirmation',\n        context: {\n          token: user.confirmationToken,\n        },\n      };\n\n      await this.mailerService.sendMail(mail);\n      return user;\n    }\n  }\n\n  async signIn(credentialsDto: CredentialsDto) {\n    const user = await this.userRepository.checkCredentials(credentialsDto);\n    if (user === null) {\n      throw new UnauthorizedException('Credenciais inválidas');\n    }\n\n    const jwtPayload = {\n      id: user.id,\n    };\n    const token = await this.jwtService.sign(jwtPayload);\n    return { token };\n  }\n\n  async confirmEmail(confirmationToken: string): Promise {\n    const result = await this.userRepository.update(\n      { confirmationToken },\n      { confirmationToken: null },\n    );\n    if (result.affected === 0) throw new NotFoundException('Token inválido');\n  }\n\n  async sendRecoverPasswordEmail(email: string): Promise {\n    const user = await this.userRepository.findOne({ email });\n\n    if (!user) throw new NotFoundException('Usuário não encontrado');\n\n    user.recoverToken = randomBytes(32).toString('hex');\n    await user.save();\n\n    const mail = {\n      to: user.email,\n      from: 'noreply@steam.com',\n      subject: 'Recuperação de senha',\n      template: './recover-password',\n      context: {\n        token: user.recoverToken,\n      },\n    };\n\n    await this.mailerService.sendMail(mail);\n  }\n\n  async changePassword(\n    id: string,\n    changePassworDto: ChangePasswordDto,\n  ): Promise {\n    const { password, passwordConfirmation } = changePassworDto;\n\n    if (password != passwordConfirmation) {\n      throw new UnprocessableEntityException('As senhas não conferem');\n    }\n\n    await this.userRepository.changePassword(id, password);\n  }\n\n  async resetPassword(\n    recoverToken: string,\n    changePasswordDto: ChangePasswordDto,\n  ): Promise {\n    const user = await this.userRepository.findOne(\n      { recoverToken },\n      { select: ['id'] },\n    );\n    if (!user) {\n      throw new NotFoundException('Token inválido');\n    }\n\n    try {\n      await this.changePassword(user.id.toString(), changePasswordDto);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async updateUser(updateUserDto: UpdateUserDto, id: string): Promise {\n    const user = await this.userRepository.findOne(id);\n    const { username } = updateUserDto;\n    user.username = username ? username : user.username;\n\n    try {\n      await user.save();\n      return user;\n    } catch (error) {\n      throw new InternalServerErrorException(\n        'Erro ao salvar os dados no banco de dados',\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseQueryParametersDto.html":{"url":"classes/BaseQueryParametersDto.html","title":"class - BaseQueryParametersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseQueryParametersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/base-query-parameters.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                limit\n                            \n                            \n                                page\n                            \n                            \n                                sort\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/base-query-parameters.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/base-query-parameters.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/base-query-parameters.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class BaseQueryParametersDto {\n  sort: string;\n  page: number;\n  limit: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                passwordConfirmation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Informe uma senha'})@MinLength(8, {message: 'A senha deve ter no mínimo 8 caracteres'})@MaxLength(32, {message: 'A senha deve ter no máximo 32 caracteres'})@IsString({message: 'Informe uma senha válida'})@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'A senha deve conter pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/change-password.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordConfirmation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Informe uma senha'})@MinLength(8, {message: 'A senha deve ter no mínimo 8 caracteres'})@MaxLength(32, {message: 'A senha deve ter no máximo 32 caracteres'})@IsString({message: 'Informe uma senha válida'})@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'A senha deve conter pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/change-password.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  MinLength,\n  MaxLength,\n  Matches,\n  IsNotEmpty,\n} from 'class-validator';\n\nexport class ChangePasswordDto {\n  @IsNotEmpty({ message: 'Informe uma senha' })\n  @MinLength(8, { message: 'A senha deve ter no mínimo 8 caracteres' })\n  @MaxLength(32, { message: 'A senha deve ter no máximo 32 caracteres' })\n  @IsString({ message: 'Informe uma senha válida' })\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message:\n      'A senha deve conter pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial',\n  })\n  password: string;\n\n  @IsNotEmpty({ message: 'Informe uma senha' })\n  @MinLength(8, { message: 'A senha deve ter no mínimo 8 caracteres' })\n  @MaxLength(32, { message: 'A senha deve ter no máximo 32 caracteres' })\n  @IsString({ message: 'Informe uma senha válida' })\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message:\n      'A senha deve conter pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial',\n  })\n  passwordConfirmation: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateGameDto.html":{"url":"classes/CreateGameDto.html","title":"class - CreateGameDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateGameDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/games/dtos/create-game.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                genre\n                            \n                            \n                                image_url\n                            \n                            \n                                release_date\n                            \n                            \n                                summary\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        genre\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/games/dtos/create-game.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/games/dtos/create-game.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        release_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/games/dtos/create-game.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/games/dtos/create-game.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/games/dtos/create-game.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateGameDto {\n  title: string;\n  image_url: string;\n  summary: string;\n  genre: string;\n  release_date: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                age\n                            \n                            \n                                country\n                            \n                            \n                                email\n                            \n                            \n                                emailConfirmation\n                            \n                            \n                                games\n                            \n                            \n                                password\n                            \n                            \n                                passwordConfirmation\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Idade do usuário', default: 20})@IsNumber()@IsNotEmpty({message: 'Informe a sua idade'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'País do usuário', default: 'Brasil'})@IsString()@IsNotEmpty({message: 'Informe o seu país'})@MaxLength(60, {message: 'O país deve ter menos de 60 caracteres'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'E-mail do usuário', default: ''})@IsString()@IsNotEmpty({message: 'Informe um endereço de e-mail'})@IsEmail({}, {message: 'Informe um e-mail válido'})@MaxLength(200, {message: 'O e-mail deve ter menos de 200 caracteres'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emailConfirmation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Confirmação do e-mail do usuário', default: ''})@IsString()@IsNotEmpty({message: 'Informe um endereço de e-mail'})@IsEmail({}, {message: 'Informe um e-mail válido'})@MaxLength(200, {message: 'O e-mail deve ter menos de 200 caracteres'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        games\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Jogos associados ao usuário', default: ''})@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Senha do usuário', default: ''})@IsString()@IsNotEmpty({message: 'Informe uma senha'})@MinLength(8, {message: 'A senha deve ter pelo menos 8 caracteres'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordConfirmation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Confirmação da senha do usuário', default: ''})@IsString()@IsNotEmpty({message: 'Informe a confirmação da senha'})@MinLength(8, {message: 'A confirmação da senha deve ter pelo menos 8 caracteres'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Username do usuário', default: ''})@IsString()@IsNotEmpty({message: 'Informe um nome de usuário'})@MaxLength(200, {message: 'O nome deve ter menos de 200 caracteres'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsNotEmpty,\n  MaxLength,\n  MinLength,\n  IsNumber,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    type: String,\n    description: 'E-mail do usuário',\n    default: '',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Informe um endereço de e-mail' })\n  @IsEmail({}, { message: 'Informe um e-mail válido' })\n  @MaxLength(200, { message: 'O e-mail deve ter menos de 200 caracteres' })\n  email: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'Confirmação do e-mail do usuário',\n    default: '',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Informe um endereço de e-mail' })\n  @IsEmail({}, { message: 'Informe um e-mail válido' })\n  @MaxLength(200, { message: 'O e-mail deve ter menos de 200 caracteres' })\n  emailConfirmation: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'País do usuário',\n    default: 'Brasil',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Informe o seu país' })\n  @MaxLength(60, {\n    message: 'O país deve ter menos de 60 caracteres',\n  })\n  country: string;\n\n  @ApiProperty({\n    type: Number,\n    description: 'Idade do usuário',\n    default: 20,\n  })\n  @IsNumber()\n  @IsNotEmpty({ message: 'Informe a sua idade' })\n  age: number;\n\n  @ApiProperty({\n    type: String,\n    description: 'Username do usuário',\n    default: '',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Informe um nome de usuário' })\n  @MaxLength(200, { message: 'O nome deve ter menos de 200 caracteres' })\n  username: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'Senha do usuário',\n    default: '',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Informe uma senha' })\n  @MinLength(8, { message: 'A senha deve ter pelo menos 8 caracteres' })\n  password: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'Confirmação da senha do usuário',\n    default: '',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Informe a confirmação da senha' })\n  @MinLength(8, {\n    message: 'A confirmação da senha deve ter pelo menos 8 caracteres',\n  })\n  passwordConfirmation: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'Jogos associados ao usuário',\n    default: '',\n  })\n  @IsString({ each: true })\n  games: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialsDto.html":{"url":"classes/CredentialsDto.html","title":"class - CredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/credentials.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/credentials.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CredentialsDto {\n  email: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindUsersQueryDto.html":{"url":"classes/FindUsersQueryDto.html","title":"class - FindUsersQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindUsersQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/find-users-query.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseQueryParametersDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                role\n                            \n                            \n                                status\n                            \n                            \n                                username\n                            \n                            \n                                limit\n                            \n                            \n                                page\n                            \n                            \n                                sort\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/find-users-query.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/find-users-query.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/find-users-query.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/find-users-query.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseQueryParametersDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseQueryParametersDto:4\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseQueryParametersDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseQueryParametersDto:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseQueryParametersDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseQueryParametersDto:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseQueryParametersDto } from 'src/shared/base-query-parameters.dto';\n\nexport class FindUsersQueryDto extends BaseQueryParametersDto {\n  username: string;\n  email: string;\n  status: boolean;\n  role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Game.html":{"url":"classes/Game.html","title":"class - Game","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Game\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/games/game.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                genre\n                            \n                            \n                                id\n                            \n                            \n                                image_url\n                            \n                            \n                                release_date\n                            \n                            \n                                summary\n                            \n                            \n                                title\n                            \n                            \n                                updatedAt\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/games/game.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        genre\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar', length: 60})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/games/game.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/games/game.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar', length: 200})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/games/game.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        release_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/games/game.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar', length: 600})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/games/game.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar', length: 200})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/games/game.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/games/game.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, undefined, {cascade: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/games/game.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addUsers\n                        \n                    \n                \n            \n            \n                \naddUsers(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/games/game.entity.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { User } from 'src/users/user.entity';\nimport {\n  BaseEntity,\n  Entity,\n  Unique,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\n\n@Entity()\n@Unique(['id'])\nexport class Game extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ nullable: false, type: 'varchar', length: 200 })\n  title: string;\n\n  @Column({ nullable: false, type: 'varchar', length: 200 })\n  image_url: string;\n\n  @Column({ nullable: false, type: 'varchar', length: 600 })\n  summary: string;\n\n  @Column({ nullable: false, type: 'varchar', length: 60 })\n  genre: string;\n\n  @Column({ nullable: false, type: 'varchar', length: 20 })\n  release_date: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @ManyToMany(() => User, (user) => user.games, {\n    cascade: true,\n  })\n  @JoinTable()\n  users: User[];\n\n  addUsers(user: User) {\n    if (this.users == null) {\n      this.users = new Array();\n    }\n    this.users.push(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GameRepository.html":{"url":"classes/GameRepository.html","title":"class - GameRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GameRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/games/games.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createGame\n                        \n                    \n                \n            \n            \n                \n                    \n                    createGame(createGameDto: CreateGameDto, role: UserRole)\n                \n            \n\n\n            \n                \n                    Defined in src/games/games.repository.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createGameDto\n                                    \n                                                CreateGameDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                UserRole\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { EntityRepository, Repository } from 'typeorm';\nimport { Game } from './game.entity';\nimport { CreateGameDto } from './dtos/create-game.dto';\nimport { UserRole } from '../users/user-roles.enum';\n\n@EntityRepository(Game)\nexport class GameRepository extends Repository {\n  async createGame(\n    createGameDto: CreateGameDto,\n    role: UserRole,\n  ): Promise {\n    const { title, image_url, summary, genre, release_date } = createGameDto;\n    const game = this.create();\n    game.title = title;\n    game.image_url = image_url;\n    game.summary = summary;\n    game.genre = genre;\n    game.release_date = release_date;\n\n    try {\n      await game.save();\n      return game;\n    } catch (error) {\n      if (error.code.toString() === '23505') {\n        throw new ConflictException('Jogo já cadastrado!');\n      } else {\n        throw new InternalServerErrorException(\n          'Erro ao salvar o jogo no banco de dados',\n        );\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GamesController.html":{"url":"controllers/GamesController.html","title":"controller - GamesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GamesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/games/games.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                games\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createGame\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findGameById\n                            \n                            \n                                    Async\n                                findGames\n                            \n                            \n                                    Async\n                                updateGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createGame\n                        \n                    \n                \n            \n            \n                \n                    \n                    createGame(createGameDto: CreateGameDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Role(UserRole.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/games/games.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createGameDto\n                                    \n                                                CreateGameDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@Role(UserRole.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/games/games.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findGameById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findGameById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@Role(UserRole.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/games/games.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findGames\n                        \n                    \n                \n            \n            \n                \n                    \n                    findGames()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/games/games.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateGame\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateGame(updateGameDto: UpdateGameDto, user: User, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')\n                \n            \n\n            \n                \n                    Defined in src/games/games.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateGameDto\n                                    \n                                                UpdateGameDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  ValidationPipe,\n  UseGuards,\n  Delete,\n  Param,\n  Get,\n  Patch,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { CreateGameDto } from './dtos/create-game.dto';\nimport { ReturnGameDto } from './dtos/return-game.dto';\nimport { AuthGuard } from '@nestjs/passport';\nimport { RolesGuard } from 'src/auth/roles.guard';\nimport { Role } from '../auth/role.decorator';\nimport { UserRole } from '../users/user-roles.enum';\nimport { GamesService } from './games.service';\nimport { UpdateGameDto } from './dtos/update-game.dto';\nimport { GetUser } from 'src/auth/get-user.decorator';\nimport { User } from 'src/users/user.entity';\n\n@Controller('games')\n@UseGuards(AuthGuard(), RolesGuard)\nexport class GamesController {\n  constructor(private gamesService: GamesService) {}\n\n  @Post()\n  @Role(UserRole.ADMIN)\n  async createGame(\n    @Body(ValidationPipe) createGameDto: CreateGameDto,\n  ): Promise {\n    const game = await this.gamesService.createGame(createGameDto);\n    return {\n      game,\n      message: 'Jogo cadastrado com sucesso',\n    };\n  }\n\n  @Get()\n  async findGames() {\n    return this.gamesService.findGames();\n  }\n\n  @Get('/:id')\n  @Role(UserRole.ADMIN)\n  async findGameById(@Param('id') id: string): Promise {\n    const game = await this.gamesService.findGameById(id);\n    return {\n      game,\n      message: 'Jogo encontrado',\n    };\n  }\n\n  @Patch('/:id')\n  async updateGame(\n    @Body(ValidationPipe) updateGameDto: UpdateGameDto,\n    @GetUser() user: User,\n    @Param('id') id: string,\n  ) {\n    if (user.role != UserRole.ADMIN)\n      throw new ForbiddenException(\n        'Você não tem autorização para acessar esse recurso',\n      );\n    else {\n      return this.gamesService.updateGame(updateGameDto, id);\n    }\n  }\n\n  @Delete('/:id')\n  @Role(UserRole.ADMIN)\n  async deleteUser(@Param('id') id: string) {\n    await this.gamesService.deleteUser(id);\n    return { message: 'Jogo excluído com sucesso' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GamesModule.html":{"url":"modules/GamesModule.html","title":"module - GamesModule","body":"\n                   \n\n\n\n\n    Modules\n    GamesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GamesModule\n\n\n\ncluster_GamesModule_providers\n\n\n\n\nGamesService\n\nGamesService\n\n\n\nGamesModule\n\nGamesModule\n\nGamesModule -->\n\nGamesService->GamesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/games/games.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GamesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GamesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { GameRepository } from './games.repository';\nimport { GamesService } from './games.service';\nimport { GamesController } from './games.controller';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([GameRepository]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n  ],\n  providers: [GamesService],\n  controllers: [GamesController],\n})\nexport class GamesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GamesService.html":{"url":"injectables/GamesService.html","title":"injectable - GamesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GamesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/games/games.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createGame\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findGameById\n                            \n                            \n                                    Async\n                                findGames\n                            \n                            \n                                    Async\n                                updateGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gameRepository: GameRepository)\n                    \n                \n                        \n                            \n                                Defined in src/games/games.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameRepository\n                                                  \n                                                        \n                                                                        GameRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createGame\n                        \n                    \n                \n            \n            \n                \n                    \n                    createGame(createGameDto: CreateGameDto)\n                \n            \n\n\n            \n                \n                    Defined in src/games/games.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createGameDto\n                                    \n                                                CreateGameDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(gameId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/games/games.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    gameId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findGameById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findGameById(gameId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/games/games.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    gameId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findGames\n                        \n                    \n                \n            \n            \n                \n                    \n                    findGames()\n                \n            \n\n\n            \n                \n                    Defined in src/games/games.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateGame\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateGame(updateGameDto: UpdateGameDto, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/games/games.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateGameDto\n                                    \n                                                UpdateGameDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GameRepository } from './games.repository';\nimport { UserRole } from '../users/user-roles.enum';\nimport { CreateGameDto } from './dtos/create-game.dto';\nimport { Game } from './game.entity';\nimport { UpdateGameDto } from './dtos/update-game.dto';\n\n@Injectable()\nexport class GamesService {\n  constructor(\n    @InjectRepository(GameRepository)\n    private gameRepository: GameRepository,\n  ) {}\n\n  async createGame(createGameDto: CreateGameDto): Promise {\n    return this.gameRepository.createGame(createGameDto, UserRole.ADMIN);\n  }\n\n  async findGames(): Promise {\n    return Game.find({\n      relations: ['games'],\n    });\n  }\n\n  async findGameById(gameId: string): Promise {\n    const game = await this.gameRepository.findOne(gameId, {\n      select: ['title', 'genre', 'release_date', 'id'],\n    });\n\n    if (!game) throw new NotFoundException('Jogo não encontrado');\n\n    return game;\n  }\n\n  async updateGame(updateGameDto: UpdateGameDto, id: string): Promise {\n    const game = await this.findGameById(id);\n    const { title, image_url, summary, genre, release_date } = updateGameDto;\n    game.title = title ? title : game.title;\n    game.image_url = image_url ? image_url : game.image_url;\n    game.summary = summary ? summary : game.summary;\n    game.genre = genre ? genre : game.genre;\n    game.release_date = release_date ? release_date : game.release_date;\n\n    try {\n      await game.save();\n      return game;\n    } catch (error) {\n      throw new InternalServerErrorException(\n        'Erro ao atualizar os dados no banco de dados',\n      );\n    }\n  }\n\n  async deleteUser(gameId: string) {\n    const result = await this.gameRepository.delete({ id: gameId });\n    if (result.affected === 0) {\n      throw new NotFoundException(\n        'Não foi encontrado um jogo com o ID informado',\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserRepository } from 'src/users/users.repository';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    @InjectRepository(UserRepository) private userRepository: UserRepository,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: 'super-secret',\n    });\n  }\n\n  async validate(payload: { id: number }) {\n    const { id } = payload;\n    const user = await this.userRepository.findOne(id, {\n      select: ['username', 'email', 'status', 'role', 'id'],\n    });\n\n    if (!user) {\n      throw new UnauthorizedException('Usuário não encontrado');\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerInterceptor.html":{"url":"injectables/LoggerInterceptor.html","title":"injectable - LoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/logger.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                log\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/interceptors/logger.interceptor.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/logger.interceptor.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(req)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/logger.interceptor.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  Inject,\n  NestInterceptor,\n  CallHandler,\n  ExecutionContext,\n} from '@nestjs/common';\nimport { Logger } from 'winston';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class LoggerInterceptor implements NestInterceptor {\n  constructor(@Inject('winston') private logger: Logger) {}\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    this.log(context.switchToHttp().getRequest());\n    return next.handle();\n  }\n\n  private log(req) {\n    const body = { ...req.body };\n    delete body.password;\n    delete body.passwordConfirmation;\n\n    const user = (req as any).user;\n    const userEmail = (req as any).email;\n\n    this.logger.info('Log', {\n      timestamp: new Date().toISOString(),\n      method: req.method,\n      route: req.route.path,\n      data: {\n        body: body,\n        query: req.query,\n        params: req.params,\n      },\n      from: req.ip,\n      madeBy: userEmail,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReturnGameDto.html":{"url":"classes/ReturnGameDto.html","title":"class - ReturnGameDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReturnGameDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/games/dtos/return-game.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                game\n                            \n                            \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        game\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Game\n\n                    \n                \n                    \n                        \n                                Defined in src/games/dtos/return-game.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/games/dtos/return-game.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Game } from '../game.entity';\n\nexport class ReturnGameDto {\n  game: Game;\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReturnUserDto.html":{"url":"classes/ReturnUserDto.html","title":"class - ReturnUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReturnUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/return-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/return-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/return-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../user.entity';\n\nexport class ReturnUserDto {\n  user: User;\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/roles.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const request = context.switchToHttp().getRequest();\n    const userRole = request.user.role;\n    const requiredRole = this.reflector.get(\n      'role',\n      context.getHandler(),\n    );\n\n    if (!requiredRole) return true;\n\n    return userRole === requiredRole;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateGameDto.html":{"url":"classes/UpdateGameDto.html","title":"class - UpdateGameDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateGameDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/games/dtos/update-game.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                genre\n                            \n                            \n                                image_url\n                            \n                            \n                                release_date\n                            \n                            \n                                summary\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        genre\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/games/dtos/update-game.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/games/dtos/update-game.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        release_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/games/dtos/update-game.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/games/dtos/update-game.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/games/dtos/update-game.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional } from 'class-validator';\n\nexport class UpdateGameDto {\n  @IsOptional()\n  title: string;\n\n  @IsOptional()\n  image_url: string;\n\n  @IsOptional()\n  summary: string;\n\n  @IsOptional()\n  genre: string;\n\n  @IsOptional()\n  release_date: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                role\n                            \n                            \n                                status\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEmail({}, {message: 'Informe um e-mail válido'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/update-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/update-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/update-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString({message: 'Informe um nome de usuário válido'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/update-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserRole } from '../user-roles.enum';\nimport { IsString, IsEmail, IsOptional } from 'class-validator';\n\nexport class UpdateUserDto {\n  @IsOptional()\n  @IsEmail({}, { message: 'Informe um e-mail válido' })\n  email: string;\n\n  @IsOptional()\n  @IsString({ message: 'Informe um nome de usuário válido' })\n  username: string;\n\n  @IsOptional()\n  role: UserRole;\n\n  @IsOptional()\n  status: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                age\n                            \n                            \n                                confirmationToken\n                            \n                            \n                                country\n                            \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                games\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                recoverToken\n                            \n                            \n                                role\n                            \n                            \n                                salt\n                            \n                            \n                                status\n                            \n                            \n                                updatedAt\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addGames\n                            \n                            \n                                    Async\n                                checkPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        confirmationToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, type: 'varchar', length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar', length: 60})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar', length: 200})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        games\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Game[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, undefined)@JoinTable({name: 'user_games'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recoverToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, type: 'varchar', length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        salt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar', length: 200})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addGames\n                        \n                    \n                \n            \n            \n                \naddGames(game: Game)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.entity.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    game\n                                    \n                                                Game\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.entity.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Game } from 'src/games/game.entity';\n\nimport {\n  BaseEntity,\n  Entity,\n  Unique,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  JoinTable,\n  ManyToMany,\n} from 'typeorm';\n\nimport * as bcrypt from 'bcrypt';\n\n@Entity()\n@Unique(['email'])\nexport class User extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ nullable: false, type: 'varchar', length: 200 })\n  email: string;\n\n  @Column({ nullable: false, type: 'varchar', length: 200 })\n  username: string;\n\n  @Column({ nullable: false, type: 'varchar', length: 60 })\n  country: string;\n\n  @Column({ nullable: false, type: 'integer' })\n  age: number;\n\n  @Column({ nullable: false, type: 'varchar', length: 20 })\n  role: string;\n\n  @Column({ nullable: false, default: true })\n  status: boolean;\n\n  @Column({ nullable: false })\n  password: string;\n\n  @Column({ nullable: false })\n  salt: string;\n\n  @Column({ nullable: true, type: 'varchar', length: 64 })\n  confirmationToken: string;\n\n  @Column({ nullable: true, type: 'varchar', length: 64 })\n  recoverToken: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @ManyToMany(() => Game, (game) => game.users)\n  @JoinTable({ name: 'user_games' })\n  games: Game[];\n\n  addGames(game: Game) {\n    if (this.games == null) {\n      this.games = new Array();\n    }\n    this.games.push(game);\n  }\n\n  async checkPassword(password: string): Promise {\n    const hash = await bcrypt.hash(password, this.salt);\n    return hash === this.password;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Private\n                                    Async\n                                checkAge\n                            \n                            \n                                    Async\n                                checkCredentials\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findUsers\n                            \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(id: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        checkAge\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAge(age: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    age\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkCredentials\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkCredentials(credentialsDto: CredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    credentialsDto\n                                    \n                                                CredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto, role: UserRole)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                UserRole\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUsers(queryDto: FindUsersQueryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryDto\n                                    \n                                                FindUsersQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport { User } from './user.entity';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { UserRole } from './user-roles.enum';\nimport * as bcrypt from 'bcrypt';\nimport * as crypto from 'crypto';\nimport {\n  ConflictException,\n  InternalServerErrorException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { CredentialsDto } from '../auth/credentials.dto';\nimport { FindUsersQueryDto } from './dtos/find-users-query.dto';\n\n@EntityRepository(User)\nexport class UserRepository extends Repository {\n  async createUser(\n    createUserDto: CreateUserDto,\n    role: UserRole,\n  ): Promise {\n    const { email, username, password, country, age } = createUserDto;\n    const user = this.create();\n    user.email = email;\n    user.username = username;\n    user.country = country;\n    user.age = await this.checkAge(age);\n    user.role = role;\n    user.status = true;\n    user.confirmationToken = crypto.randomBytes(32).toString('hex');\n    user.salt = await bcrypt.genSalt();\n    user.password = await this.hashPassword(password, user.salt);\n\n    try {\n      await user.save();\n      delete user.password;\n      delete user.salt;\n      return user;\n    } catch (error) {\n      if (error.code.toString() === '23505') {\n        throw new ConflictException('Endereço de e-mail já está em uso!');\n      } else {\n        throw new InternalServerErrorException(\n          'Erro ao salvar o usuário no banco de dados',\n        );\n      }\n    }\n  }\n\n  async findUsers(\n    queryDto: FindUsersQueryDto,\n  ): Promise {\n    queryDto.page = queryDto.page  100 ? 100 : queryDto.limit;\n    queryDto.status = queryDto.status === undefined ? true : queryDto.status;\n\n    const { email, username, status, role } = queryDto;\n    const query = this.createQueryBuilder('user');\n    query.where('user.status = :status', { status });\n\n    if (email) {\n      query.andWhere('user.email ILIKE :email', { email: `%${email}%` });\n    }\n\n    if (username) {\n      query.andWhere('user.username ILIKE :username', {\n        username: `%${username}%`,\n      });\n    }\n\n    if (role) {\n      query.andWhere('user.role ILIKE :role', { role });\n    }\n\n    query.skip((queryDto.page - 1) * queryDto.limit);\n    query.take(queryDto.limit);\n    query.orderBy(queryDto.sort ? JSON.parse(queryDto.sort) : undefined);\n    query.select(['user.username', 'user.email', 'user.role', 'user.status']);\n\n    const [users, total] = await query.getManyAndCount();\n\n    return { users, total };\n  }\n\n  async changePassword(id: string, password: string) {\n    const user = await this.findOne(id);\n    user.salt = await bcrypt.genSalt();\n    user.password = await this.hashPassword(password, user.salt);\n    user.recoverToken = null;\n    await user.save();\n  }\n\n  async checkCredentials(credentialsDto: CredentialsDto): Promise {\n    const { email, password } = credentialsDto;\n    const user = await this.findOne({ email, status: true });\n    if (user && (await user.checkPassword(password))) {\n      return user;\n    } else {\n      return null;\n    }\n  }\n\n  private async hashPassword(password: string, salt: string): Promise {\n    return bcrypt.hash(password, salt);\n  }\n\n  private async checkAge(age: number): Promise {\n    if (age \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAdminUser\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                findUsers\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAdminUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAdminUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/adm')@ApiCreatedResponse({description: 'Sucesso ao criar'})@ApiForbiddenResponse({description: 'Não permitido'})@Role(UserRole.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiCreatedResponse({description: 'Sucesso ao criar'})@ApiForbiddenResponse({description: 'Não permitido'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOkResponse({description: 'Sucesso ao deletar'})@ApiForbiddenResponse({description: 'Não permitido'})@Role(UserRole.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all')@ApiOkResponse({description: 'Sucesso ao listar'})@ApiForbiddenResponse({description: 'Não permitido'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOkResponse({description: 'Sucesso ao listar'})@ApiForbiddenResponse({description: 'Não permitido'})@Role(UserRole.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUsers(query: FindUsersQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({description: 'Sucesso ao listar'})@ApiForbiddenResponse({description: 'Não permitido'})@Role(UserRole.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                FindUsersQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(updateUserDto: UpdateUserDto, user: User, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOkResponse({description: 'Sucesso ao atualizar'})@ApiForbiddenResponse({description: 'Não permitido'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  ValidationPipe,\n  UseGuards,\n  Get,\n  Param,\n  Patch,\n  ForbiddenException,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { ReturnUserDto } from './dtos/return-user.dto';\nimport { UsersService } from './users.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { RolesGuard } from 'src/auth/roles.guard';\nimport { Role } from '../auth/role.decorator';\nimport { UserRole } from './user-roles.enum';\nimport { UpdateUserDto } from './dtos/update-user.dto';\nimport { User } from './user.entity';\nimport { GetUser } from 'src/auth/get-user.decorator';\nimport { FindUsersQueryDto } from './dtos/find-users-query.dto';\nimport {\n  ApiTags,\n  ApiCreatedResponse,\n  ApiOkResponse,\n  ApiForbiddenResponse,\n} from '@nestjs/swagger';\n\n@ApiTags('users')\n@Controller('users')\n@UseGuards(AuthGuard(), RolesGuard)\nexport class UsersController {\n  constructor(private usersService: UsersService) {}\n\n  @Post()\n  @ApiCreatedResponse({ description: 'Sucesso ao criar' })\n  @ApiForbiddenResponse({ description: 'Não permitido' })\n  async createUser(\n    @Body(ValidationPipe) createUserDto: CreateUserDto,\n  ): Promise {\n    const user = await this.usersService.createUser(createUserDto);\n    return {\n      user,\n      message: 'Usuário cadastrado com sucesso!',\n    };\n  }\n\n  @Post('/adm')\n  @ApiCreatedResponse({ description: 'Sucesso ao criar' })\n  @ApiForbiddenResponse({ description: 'Não permitido' })\n  @Role(UserRole.ADMIN)\n  async createAdminUser(\n    @Body(ValidationPipe) createUserDto: CreateUserDto,\n  ): Promise {\n    const user = await this.usersService.createAdminUser(createUserDto);\n    return {\n      user,\n      message: 'Administrador cadastrado com sucesso',\n    };\n  }\n\n  @Get('/all')\n  @ApiOkResponse({ description: 'Sucesso ao listar' })\n  @ApiForbiddenResponse({ description: 'Não permitido' })\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get()\n  @ApiOkResponse({ description: 'Sucesso ao listar' })\n  @ApiForbiddenResponse({ description: 'Não permitido' })\n  @Role(UserRole.ADMIN)\n  async findUsers(@Query() query: FindUsersQueryDto) {\n    const found = await this.usersService.findUsers(query);\n\n    return {\n      found,\n      message: 'Usuários encontrados',\n    };\n  }\n\n  @Get('/:id')\n  @ApiOkResponse({ description: 'Sucesso ao listar' })\n  @ApiForbiddenResponse({ description: 'Não permitido' })\n  @Role(UserRole.ADMIN)\n  async findUserById(@Param('id') id: string): Promise {\n    const user = await this.usersService.findUserById(id);\n    return {\n      user,\n      message: 'Usuário encontrado',\n    };\n  }\n\n  @Patch('/:id')\n  @ApiOkResponse({ description: 'Sucesso ao atualizar' })\n  @ApiForbiddenResponse({ description: 'Não permitido' })\n  async updateUser(\n    @Body(ValidationPipe) updateUserDto: UpdateUserDto,\n    @GetUser() user: User,\n    @Param('id') id: string,\n  ) {\n    if (user.role != UserRole.ADMIN && user.id != id)\n      throw new ForbiddenException(\n        'Você não tem autorização para acessar esse recurso',\n      );\n    else {\n      return this.usersService.updateUser(updateUserDto, id);\n    }\n  }\n\n  @Delete('/:id')\n  @ApiOkResponse({ description: 'Sucesso ao deletar' })\n  @ApiForbiddenResponse({ description: 'Não permitido' })\n  @Role(UserRole.ADMIN)\n  async deleteUser(@Param('id') id: string) {\n    await this.usersService.deleteUser(id);\n    return { message: 'Usuário excluído com sucesso' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService\n\nUsersService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserRepository } from './users.repository';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserRepository]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n  ],\n  providers: [UsersService],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAdminUser\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                findUsers\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAdminUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAdminUser(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUsers(queryDto: FindUsersQueryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryDto\n                                    \n                                                FindUsersQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(updateUserDto: UpdateUserDto, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnprocessableEntityException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserRepository } from './users.repository';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { User } from './user.entity';\nimport { UserRole } from './user-roles.enum';\nimport { UpdateUserDto } from './dtos/update-user.dto';\nimport { FindUsersQueryDto } from './dtos/find-users-query.dto';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(UserRepository)\n    private userRepository: UserRepository,\n  ) {}\n\n  async createUser(createUserDto: CreateUserDto): Promise {\n    if (createUserDto.password != createUserDto.passwordConfirmation) {\n      throw new UnprocessableEntityException('As senhas não conferem');\n    } else if (createUserDto.email != createUserDto.emailConfirmation) {\n      throw new UnprocessableEntityException('Os e-mails não conferem');\n    } else {\n      return this.userRepository.createUser(createUserDto, UserRole.USER);\n    }\n  }\n\n  async createAdminUser(createUserDto: CreateUserDto): Promise {\n    if (createUserDto.password != createUserDto.passwordConfirmation) {\n      throw new UnprocessableEntityException('As senhas não conferem');\n    } else {\n      return this.userRepository.createUser(createUserDto, UserRole.ADMIN);\n    }\n  }\n\n  async findAll() {\n    return this.userRepository.find({\n      relations: ['games'],\n    });\n  }\n\n  async findUsers(\n    queryDto: FindUsersQueryDto,\n  ): Promise {\n    const users = await this.userRepository.findUsers(queryDto);\n    return users;\n  }\n\n  async findUserById(userId: string): Promise {\n    const user = await this.userRepository.findOne(userId, {\n      select: ['email', 'username', 'role', 'id'],\n    });\n\n    if (!user) throw new NotFoundException('Usuário não encontrado');\n\n    return user;\n  }\n\n  async updateUser(updateUserDto: UpdateUserDto, id: string): Promise {\n    const user = await this.findUserById(id);\n    const { username, email, role, status } = updateUserDto;\n    user.username = username ? username : user.username;\n    user.email = email ? email : user.email;\n    user.role = role ? role : user.role;\n    user.status = status ? status : user.status;\n\n    try {\n      await user.save();\n      return user;\n    } catch (error) {\n      throw new InternalServerErrorException(\n        'Erro ao salvar os dados no banco de dados',\n      );\n    }\n  }\n\n  async deleteUser(userId: string) {\n    const result = await this.userRepository.delete({ id: userId });\n    if (result.affected === 0) {\n      throw new NotFoundException(\n        'Não foi encontrado um usuário com o ID informado',\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/credentials.dto.ts\n            \n            class\n            CredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/role.decorator.ts\n            \n            variable\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/configs/mailer.config.ts\n            \n            variable\n            mailerConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/configs/typeorm.config.ts\n            \n            variable\n            typeOrmConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/configs/winston.config.ts\n            \n            variable\n            winstonConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/games/dtos/create-game.dto.ts\n            \n            class\n            CreateGameDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/games/dtos/return-game.dto.ts\n            \n            class\n            ReturnGameDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/games/dtos/update-game.dto.ts\n            \n            class\n            UpdateGameDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/games/game.entity.ts\n            \n            class\n            Game\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/games/games.controller.ts\n            \n            controller\n            GamesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/games/games.repository.ts\n            \n            class\n            GameRepository\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/games/games.service.ts\n            \n            injectable\n            GamesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/interceptors/logger.interceptor.ts\n            \n            injectable\n            LoggerInterceptor\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/base-query-parameters.dto.ts\n            \n            class\n            BaseQueryParametersDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/dtos/find-users-query.dto.ts\n            \n            class\n            FindUsersQueryDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/dtos/return-user.dto.ts\n            \n            class\n            ReturnUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/users.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^1.6.0\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.0.2\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.1.1\n        \n            @nestjs/swagger : ^5.1.3\n        \n            @nestjs/typeorm : ^8.0.2\n        \n            @types/dotenv : ^8.2.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            dotenv : ^10.0.0\n        \n            handlebars : ^4.7.7\n        \n            nest-winston : ^1.6.1\n        \n            nodemailer : ^6.7.0\n        \n            passport : ^0.5.0\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.7.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.38\n        \n            winston : ^3.3.3\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserRole   (src/.../user-roles.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/user-roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GamesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_GamesModule\n\n\n\ncluster_GamesModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nGamesModule\n\nGamesModule\n\nAppModule -->\n\nGamesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nGamesService\n\nGamesService\n\nGamesModule -->\n\nGamesService->GamesModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            mailerConfig   (src/.../mailer.config.ts)\n                        \n                        \n                            Role   (src/.../role.decorator.ts)\n                        \n                        \n                            typeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                        \n                            winstonConfig   (src/.../winston.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/get-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data, req): User => {\n  const user = req.args[0].user;\n  return user;\n})\n                    \n                \n\n\n        \n    \n\n    src/configs/mailer.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mailerConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MailerOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  template: {\n    dir: path.resolve(__dirname, '..', '..', 'templates'),\n    adapter: new HandlebarsAdapter(),\n    options: {\n      extName: '.hbs',\n      layoutsDir: path.resolve(__dirname, '..', '..', 'templates'),\n    },\n  },\n  transport: `smtp://janicecaldeira.dev@gmail.com:nice.dev.blue@smtp.gmail.com`,\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Role\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (role: string) => SetMetadata('role', role)\n                    \n                \n\n\n        \n    \n\n    src/configs/typeorm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        typeOrmConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'postgres',\n  host: 'localhost',\n  port: 5432,\n  username: 'steam',\n  password: 'pgpassword',\n  database: 'steam',\n  entities: [__dirname + '/../**/*.entity.{js,ts}'],\n  synchronize: true,\n}\n                    \n                \n\n\n        \n    \n\n    src/configs/winston.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        winstonConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WinstonModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  levels: winston.config.npm.levels,\n  level: 'verbose',\n  transports: [\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.timestamp(),\n        nestWinstonModuleUtilities.format.nestLike(),\n      ),\n    }),\n    new winston.transports.File({\n      level: 'verbose',\n      filename: 'application.log',\n      dirname: 'logs',\n    }),\n  ],\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
